{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"UiPath Community SDK for Python","text":"<p>A Python SDK for interacting with the UiPath Orchestrator API.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Complete API coverage for UiPath Orchestrator</li> <li>Easy-to-use interface</li> <li>Type hints for better IDE support</li> <li>Comprehensive documentation</li> <li>Examples for common use cases</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install uipath-community-sdk\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from importlib import import_module\nuip = import_module('uipath-community-sdk')\n\nclient = uip.UiPathClient(\n    organization_id=\"your_organization_id\",\n    tenant_id=\"your_tenant_id\",\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\"\n)\n</code></pre>"},{"location":"#resource-examples","title":"Resource Examples","text":""},{"location":"#assets","title":"Assets","text":"<pre><code># Get all assets\nassets = client.assets.get()\n\n# Create an asset\nasset = client.assets.create({\n    \"Name\": \"DatabaseConnection\",\n    \"ValueType\": \"Text\",\n    \"Value\": \"connection_string_here\"\n})\n\n# Get asset by name\nasset = client.assets.get_by_name(\"DatabaseConnection\")\n\n# Update asset\nclient.assets.update(asset[\"Id\"], {\n    \"Value\": \"new_connection_string\"\n})\n</code></pre>"},{"location":"#directory-service","title":"Directory Service","text":"<pre><code># Get available domains\ndomains = client.directory.get_domains()\n\n# Search for users and groups\nusers = client.directory.search_users_and_groups(\n    search_context=\"Users\",\n    domain=\"mydomain\",\n    prefix=\"john\"\n)\n\n# Get directory permissions\npermissions = client.directory.get_permissions(\n    username=\"john.doe\",\n    domain=\"mydomain\"\n)\n</code></pre>"},{"location":"#folders","title":"Folders","text":"<pre><code># Get all folders\nfolders = client.folders.get()\n\n# Get folder by ID\nfolder = client.folders.get_by_id(123)\n\n# Get folder hierarchy\nhierarchy = client.folders.get_folder_hierarchy()\n\n# Update folder\nclient.folders.update_name_description(\n    key=\"folder_key\",\n    name=\"New Name\",\n    description=\"New description\"\n)\n</code></pre>"},{"location":"#jobs","title":"Jobs","text":"<pre><code># Get jobs\njobs = client.jobs.get(\n    state=\"Successful\",\n    robot_name=\"MyRobot\"\n)\n\n# Start job\njob = client.jobs.start_jobs({\n    \"startInfo\": {\n        \"ReleaseKey\": \"release_key\",\n        \"Strategy\": \"Specific\",\n        \"RobotIds\": [123, 456]\n    }\n})\n\n# Stop job\nclient.jobs.stop_job(job[\"Id\"])\n</code></pre>"},{"location":"#libraries","title":"Libraries","text":"<pre><code># Get all libraries\nlibraries = client.libraries.get()\n\n# Create library\nlibrary = client.libraries.create({\n    \"Name\": \"MyLibrary\",\n    \"Version\": \"1.0.0\"\n})\n\n# Delete library\nclient.libraries.delete(library[\"Id\"])\n</code></pre>"},{"location":"#licensing","title":"Licensing","text":"<pre><code># Acquire license units\nresult = client.licensing.acquire({\n    \"count\": 5,\n    \"licenseType\": \"Unattended\"\n})\n\n# Release license units\nclient.licensing.release({\n    \"count\": 2,\n    \"licenseType\": \"Unattended\"\n})\n</code></pre>"},{"location":"#logs","title":"Logs","text":"<pre><code># Submit multiple log entries\nclient.logs.submit_logs([\n    {\n        \"message\": \"Process started\",\n        \"level\": \"Information\",\n        \"timeStamp\": \"2023-01-18T14:46:07.4152893+02:00\",\n        \"processName\": \"MyProcess\"\n    }\n])\n</code></pre>"},{"location":"#machines","title":"Machines","text":"<pre><code># Get all machines\nmachines = client.machines.get()\n\n# Get machine by name\nmachine = client.machines.get_by_name(\"MyMachine\")\n\n# Update machine\nclient.machines.update(machine[\"Id\"], {\n    \"Name\": \"NewMachineName\",\n    \"Description\": \"Updated description\"\n})\n</code></pre>"},{"location":"#maintenance","title":"Maintenance","text":"<pre><code># Start maintenance window\nclient.maintenance.start(\n    phase=\"Draining\",\n    force=False,\n    kill_jobs=False\n)\n\n# End maintenance\nclient.maintenance.end()\n</code></pre>"},{"location":"#packages","title":"Packages","text":"<pre><code># Get all packages\npackages = client.packages.get()\n\n# Upload package\nwith open(\"MyPackage.nupkg\", \"rb\") as f:\n    package = client.packages.upload(f)\n\n# Delete package\nclient.packages.delete(package[\"Id\"])\n</code></pre>"},{"location":"#processes","title":"Processes","text":"<pre><code># Get all processes\nprocesses = client.processes.get()\n\n# Get process by ID\nprocess = client.processes.get_by_id(123)\n\n# Start process\nclient.processes.start_process(\n    process_id=123,\n    robot_ids=[456],\n    input_arguments={\"param1\": \"value1\"}\n)\n</code></pre>"},{"location":"#queues","title":"Queues","text":"<pre><code># Get all queues\nqueues = client.queues.get()\n\n# Add queue item\nclient.queues.add_queue_item(\n    queue_name=\"MyQueue\",\n    item_data={\"field1\": \"value1\"}\n)\n\n# Get queue items\nitems = client.queues.get_queue_items(\n    queue_name=\"MyQueue\",\n    status=\"New\"\n)\n</code></pre>"},{"location":"#releases","title":"Releases","text":"<pre><code># Get all releases\nreleases = client.releases.get()\n\n# Create release\nrelease = client.releases.create({\n    \"Name\": \"MyRelease\",\n    \"ProcessKey\": \"process_key\",\n    \"EnvironmentId\": 123\n})\n\n# Delete release\nclient.releases.delete(release[\"Id\"])\n</code></pre>"},{"location":"#robots","title":"Robots","text":"<pre><code># Get all robots\nrobots = client.robots.get()\n\n# Get robot by name\nrobot = client.robots.get_by_name(\"MyRobot\")\n\n# Update robot\nclient.robots.update(robot[\"Id\"], {\n    \"Name\": \"NewRobotName\",\n    \"Description\": \"Updated description\"\n})\n\n# Toggle robot enabled state\nclient.robots.toggle_enabled(robot[\"Id\"], enabled=True)\n</code></pre>"},{"location":"#stats","title":"Stats","text":"<pre><code># Get job statistics\njob_stats = client.stats.get_jobs_stats()\n\n# Get license usage\nlicense_stats = client.stats.get_license_stats(days=30)\n\n# Get session stats\nsession_stats = client.stats.get_sessions_stats()\n</code></pre>"},{"location":"#status","title":"Status","text":"<pre><code># Check service status\nstatus = client.status.get()\n\n# Verify host availability\nresult = client.status.verify_host_availability(\"https://myhost.com\")\n</code></pre>"},{"location":"#task-forms","title":"Task Forms","text":"<pre><code># Get tasks with filters\ntasks = client.task_forms.get_tasks(\n    title=\"Review Document\",\n    status=\"Pending\",\n    take=10\n)\n\n# Complete a task\nclient.task_forms.complete_task(\n    task_id=123,\n    action=\"Approved\"\n)\n</code></pre>"},{"location":"#test-automation","title":"Test Automation","text":"<pre><code># Start test set execution\nexecution_id = client.test_automation.start_test_set_execution(\n    test_set_id=456,\n    trigger_type=\"Manual\"\n)\n\n# Cancel test execution\nclient.test_automation.cancel_test_set_execution(test_set_execution_id=789)\n\n# Get test case execution results\nresults = client.test_automation.get_package_info(\n    test_case_unique_id=\"test_id\",\n    package_identifier=\"package_id\"\n)\n</code></pre>"},{"location":"#test-data-queue","title":"Test Data Queue","text":"<pre><code># Add queue item\nclient.test_data_queue.add_item(\n    queue_name=\"TestQueue\",\n    content={\"data\": \"test value\"}\n)\n\n# Bulk add items\nitems = [\n    {\"data\": \"value1\"},\n    {\"data\": \"value2\"}\n]\nclient.test_data_queue.bulk_add_items(\"TestQueue\", items)\n\n# Delete all items\nclient.test_data_queue.delete_all_items(\"TestQueue\")\n</code></pre>"},{"location":"#webhooks","title":"Webhooks","text":"<pre><code># Create webhook\nwebhook = client.webhooks.create({\n    \"Name\": \"MyWebhook\",\n    \"Url\": \"https://my-webhook-handler.com\",\n    \"Enabled\": True,\n    \"SubscribeToAllEvents\": False,\n    \"AllowInsecureSsl\": False,\n    \"Events\": [\n        {\"EventType\": \"Job.Completed\"},\n        {\"EventType\": \"Job.Faulted\"}\n    ]\n})\n\n# Get webhook event types\nevent_types = client.webhooks.get_event_types()\n\n# Test webhook\nclient.webhooks.ping(webhook[\"Id\"])\n</code></pre>"},{"location":"#additional-resources","title":"Additional Resources","text":"<p>For more detailed information about specific resources and their methods, please refer to the API documentation or the source code docstrings.</p>"},{"location":"#error-handling","title":"Error Handling","text":"<p>The SDK will raise appropriate exceptions when API calls fail. It's recommended to handle these exceptions in your code:</p> <pre><code>from requests.exceptions import HTTPError\n\ntry:\n    client.robots.get_by_name(\"NonExistentRobot\")\nexcept HTTPError as e:\n    if e.response.status_code == 404:\n        print(\"Robot not found\")\n    else:\n        print(f\"API error: {e}\")\n</code></pre>"},{"location":"#authentication","title":"Authentication","text":"<p>The SDK supports different authentication methods:</p> <pre><code># Using client credentials\nclient = UiPathClient(\n    client_id=\"your_client_id\",\n    client_secret=\"your_client_secret\",\n    organization_id=\"your_org_id\",\n    tenant_id=\"your_tenant_id\"\n)\n\n# Using username/password\nclient = UiPathClient(\n    username=\"your_username\",\n    password=\"your_password\",\n    organization_id=\"your_org_id\",\n    tenant_id=\"your_tenant_id\"\n)\n</code></pre>"},{"location":"resources/alerts/","title":"Alerts","text":"<p>The Alerts resource allows you to manage UiPath Orchestrator alerts and notifications for system events, job failures, and resource status changes.</p>"},{"location":"resources/alerts/#related-resources","title":"Related Resources","text":"<ul> <li>Jobs - Jobs that generate alerts</li> <li>Robots - Robot status alerts</li> <li>Queues - Queue processing alerts</li> <li>Status - System status alerts</li> </ul>"},{"location":"resources/alerts/#methods","title":"Methods","text":""},{"location":"resources/alerts/#get","title":"get()","text":"<p>Get a list of alerts with optional filters.</p> <pre><code>alerts = client.alerts.get(\n    severity=\"Critical\",     # Filter by severity\n    status=\"Active\",        # Filter by status\n    from_date=\"2023-01-01\"  # Filter by date\n)\n</code></pre>"},{"location":"resources/alerts/#parameters","title":"Parameters","text":"<ul> <li><code>severity</code> (str, optional): Filter by severity (Critical, Warning, Info)</li> <li><code>status</code> (str, optional): Filter by status (Active, Acknowledged, Resolved)</li> <li><code>from_date</code> (str, optional): Filter by date (ISO format)</li> </ul>"},{"location":"resources/alerts/#returns","title":"Returns","text":"<p>List[Dict]: List of alert objects matching the filters</p>"},{"location":"resources/alerts/#get_by_id","title":"get_by_id()","text":"<p>Get a specific alert by ID.</p> <pre><code>alert = client.alerts.get_by_id(123)\n</code></pre>"},{"location":"resources/alerts/#parameters_1","title":"Parameters","text":"<ul> <li><code>alert_id</code> (int): ID of the alert to retrieve</li> </ul>"},{"location":"resources/alerts/#returns_1","title":"Returns","text":"<p>Dict: Alert details</p>"},{"location":"resources/alerts/#acknowledge","title":"acknowledge()","text":"<p>Acknowledge an alert.</p> <pre><code>client.alerts.acknowledge(\n    alert_id=123,\n    notes=\"Investigating the issue\"\n)\n</code></pre>"},{"location":"resources/alerts/#parameters_2","title":"Parameters","text":"<ul> <li><code>alert_id</code> (int): ID of the alert</li> <li><code>notes</code> (str, optional): Acknowledgment notes</li> </ul>"},{"location":"resources/alerts/#resolve","title":"resolve()","text":"<p>Resolve an alert.</p> <pre><code>client.alerts.resolve(\n    alert_id=123,\n    resolution=\"Issue fixed by restarting service\"\n)\n</code></pre>"},{"location":"resources/alerts/#parameters_3","title":"Parameters","text":"<ul> <li><code>alert_id</code> (int): ID of the alert</li> <li><code>resolution</code> (str, optional): Resolution details</li> </ul>"},{"location":"resources/alerts/#examples","title":"Examples","text":""},{"location":"resources/alerts/#alert-monitoring","title":"Alert Monitoring","text":"<pre><code>def monitor_critical_alerts():\n    \"\"\"Monitor and handle critical alerts\"\"\"\n    alerts = client.alerts.get(\n        severity=\"Critical\",\n        status=\"Active\"\n    )\n\n    handled = []\n    for alert in alerts:\n        try:\n            # Check alert type\n            if alert[\"Type\"] == \"JobFaulted\":\n                # Handle job failure\n                job_id = alert[\"EntityId\"]\n                job = client.jobs.get_by_id(job_id)\n\n                if job[\"State\"] == \"Faulted\":\n                    # Attempt job retry\n                    client.jobs.start_jobs(\n                        release_key=job[\"ReleaseKey\"],\n                        robot_ids=[job[\"RobotId\"]]\n                    )\n\n            elif alert[\"Type\"] == \"RobotOffline\":\n                # Handle robot offline\n                robot_id = alert[\"EntityId\"]\n                robot = client.robots.get_by_id(robot_id)\n\n                if not robot[\"IsOnline\"]:\n                    # Notify admin\n                    print(f\"Robot {robot['Name']} is offline\")\n\n            # Acknowledge the alert\n            client.alerts.acknowledge(\n                alert[\"Id\"],\n                notes=\"Automated handling initiated\"\n            )\n\n            handled.append({\n                \"alert_id\": alert[\"Id\"],\n                \"type\": alert[\"Type\"],\n                \"status\": \"handled\"\n            })\n\n        except Exception as e:\n            handled.append({\n                \"alert_id\": alert[\"Id\"],\n                \"type\": alert[\"Type\"],\n                \"status\": \"error\",\n                \"error\": str(e)\n            })\n\n    return handled\n\n# Monitor alerts\nhandled_alerts = monitor_critical_alerts()\n</code></pre>"},{"location":"resources/alerts/#alert-aggregation","title":"Alert Aggregation","text":"<pre><code>def aggregate_alerts(time_window: int = 24):\n    \"\"\"Aggregate alerts for reporting\"\"\"\n    from datetime import datetime, timedelta\n\n    start_date = (datetime.now() - timedelta(hours=time_window)).isoformat()\n    alerts = client.alerts.get(from_date=start_date)\n\n    # Aggregate by type and severity\n    aggregation = {\n        \"by_type\": {},\n        \"by_severity\": {},\n        \"total_count\": len(alerts),\n        \"active_count\": 0,\n        \"window_hours\": time_window\n    }\n\n    for alert in alerts:\n        # Aggregate by type\n        alert_type = alert[\"Type\"]\n        if alert_type not in aggregation[\"by_type\"]:\n            aggregation[\"by_type\"][alert_type] = 0\n        aggregation[\"by_type\"][alert_type] += 1\n\n        # Aggregate by severity\n        severity = alert[\"Severity\"]\n        if severity not in aggregation[\"by_severity\"]:\n            aggregation[\"by_severity\"][severity] = 0\n        aggregation[\"by_severity\"][severity] += 1\n\n        # Count active alerts\n        if alert[\"Status\"] == \"Active\":\n            aggregation[\"active_count\"] += 1\n\n    return aggregation\n\n# Aggregate alerts\nalert_stats = aggregate_alerts(time_window=24)\n</code></pre>"},{"location":"resources/alerts/#alert-auto-resolution","title":"Alert Auto-Resolution","text":"<pre><code>def auto_resolve_alerts(max_age_hours: int = 48):\n    \"\"\"Auto-resolve old alerts based on conditions\"\"\"\n    from datetime import datetime, timedelta\n\n    cutoff_date = (datetime.now() - timedelta(hours=max_age_hours)).isoformat()\n    old_alerts = client.alerts.get(\n        status=\"Active\",\n        from_date=cutoff_date\n    )\n\n    resolutions = []\n    for alert in old_alerts:\n        try:\n            # Check if alert can be auto-resolved\n            if alert[\"Severity\"] != \"Critical\":\n                # Resolve non-critical old alerts\n                client.alerts.resolve(\n                    alert[\"Id\"],\n                    resolution=f\"Auto-resolved after {max_age_hours} hours\"\n                )\n\n                resolutions.append({\n                    \"alert_id\": alert[\"Id\"],\n                    \"status\": \"resolved\",\n                    \"age_hours\": max_age_hours\n                })\n\n        except Exception as e:\n            resolutions.append({\n                \"alert_id\": alert[\"Id\"],\n                \"status\": \"error\",\n                \"error\": str(e)\n            })\n\n    return resolutions\n\n# Auto-resolve old alerts\nresolutions = auto_resolve_alerts(max_age_hours=48)\n</code></pre>"},{"location":"resources/alerts/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to resolve already resolved alert\n    client.alerts.resolve(123, \"Issue fixed\")\nexcept HTTPError as e:\n    if e.response.status_code == 400:\n        print(\"Alert already resolved\")\n    elif e.response.status_code == 404:\n        print(\"Alert not found\")\n    else:\n        print(f\"Error handling alert: {e}\")\n</code></pre>"},{"location":"resources/alerts/#best-practices","title":"Best Practices","text":"<ol> <li>Monitor critical alerts promptly</li> <li>Set up alert notifications</li> <li>Document alert handling procedures</li> <li>Regular alert cleanup</li> <li>Track alert patterns</li> <li>Automate common resolutions</li> <li>Maintain alert history</li> <li>Set appropriate severity levels</li> <li>Configure alert thresholds</li> </ol>"},{"location":"resources/alerts/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control alert access</li> <li>Audit alert handling</li> <li>Secure alert data</li> <li>Monitor alert patterns</li> <li>Validate alert sources</li> <li>Protect sensitive information</li> <li>Regular security reviews</li> </ol>"},{"location":"resources/alerts/#see-also","title":"See Also","text":"<ul> <li>UiPath Alerts Documentation</li> <li>Alert Management</li> <li>Notification Settings</li> <li>Jobs for job monitoring</li> <li>Status for system monitoring </li> </ul>"},{"location":"resources/assets/","title":"Assets","text":"<p>The Assets resource allows you to manage UiPath Orchestrator assets. Assets are used to store and manage configuration values, credentials, and other settings that can be used across different processes.</p>"},{"location":"resources/assets/#related-resources","title":"Related Resources","text":"<ul> <li>Robots - Robots can use assets during execution</li> <li>Processes - Processes can reference assets</li> <li>Jobs - Jobs can use assets during execution</li> </ul>"},{"location":"resources/assets/#methods","title":"Methods","text":""},{"location":"resources/assets/#get","title":"get()","text":"<p>Get a list of assets with optional filters.</p> <pre><code>assets = client.assets.get(\n    name=\"DatabaseConnection\",    # Filter by asset name\n    folder_id=123                # Filter by folder ID\n)\n</code></pre>"},{"location":"resources/assets/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str, optional): Filter by asset name</li> <li><code>folder_id</code> (int, optional): Filter by folder ID</li> </ul>"},{"location":"resources/assets/#returns","title":"Returns","text":"<p>List[Dict]: List of asset objects matching the filters</p>"},{"location":"resources/assets/#get_by_id","title":"get_by_id()","text":"<p>Get a specific asset by ID.</p> <pre><code>asset = client.assets.get_by_id(123)\n</code></pre>"},{"location":"resources/assets/#parameters_1","title":"Parameters","text":"<ul> <li><code>asset_id</code> (int): ID of the asset to retrieve</li> </ul>"},{"location":"resources/assets/#returns_1","title":"Returns","text":"<p>Dict: Asset details</p>"},{"location":"resources/assets/#get_by_name","title":"get_by_name()","text":"<p>Get a specific asset by name.</p> <pre><code>asset = client.assets.get_by_name(\"DatabaseConnection\")\n</code></pre>"},{"location":"resources/assets/#parameters_2","title":"Parameters","text":"<ul> <li><code>name</code> (str): Name of the asset to retrieve</li> </ul>"},{"location":"resources/assets/#returns_2","title":"Returns","text":"<p>Dict: Asset details</p>"},{"location":"resources/assets/#create","title":"create()","text":"<p>Create a new asset.</p> <pre><code>asset = client.assets.create({\n    \"Name\": \"DatabaseConnection\",\n    \"ValueType\": \"Text\",\n    \"Value\": \"Server=myserver;Database=mydb;\",\n    \"Description\": \"Production database connection string\",\n    \"CanBeDeleted\": True,\n    \"ValueScope\": \"Global\"\n})\n</code></pre>"},{"location":"resources/assets/#parameters_3","title":"Parameters","text":"<ul> <li><code>asset_data</code> (Dict): Asset configuration including:</li> <li><code>Name</code> (str, required): Asset name</li> <li><code>ValueType</code> (str, required): Type of value. Valid values:<ul> <li><code>Text</code></li> <li><code>Integer</code></li> <li><code>Boolean</code></li> <li><code>Credential</code></li> <li><code>WindowsCredential</code></li> </ul> </li> <li><code>Value</code> (Any, required): Asset value</li> <li><code>Description</code> (str, optional): Asset description</li> <li><code>CanBeDeleted</code> (bool, optional): Whether asset can be deleted</li> <li><code>ValueScope</code> (str, optional): Scope of the asset (Global, PerRobot)</li> </ul>"},{"location":"resources/assets/#returns_3","title":"Returns","text":"<p>Dict: Created asset details</p>"},{"location":"resources/assets/#update","title":"update()","text":"<p>Update an existing asset.</p> <pre><code>client.assets.update(123, {\n    \"Value\": \"Server=newserver;Database=mydb;\",\n    \"Description\": \"Updated connection string\"\n})\n</code></pre>"},{"location":"resources/assets/#parameters_4","title":"Parameters","text":"<ul> <li><code>asset_id</code> (int): ID of asset to update</li> <li><code>asset_data</code> (Dict): Updated asset data</li> </ul>"},{"location":"resources/assets/#returns_4","title":"Returns","text":"<p>Dict: Updated asset details</p>"},{"location":"resources/assets/#delete","title":"delete()","text":"<p>Delete an asset.</p> <pre><code>client.assets.delete(123)\n</code></pre>"},{"location":"resources/assets/#parameters_5","title":"Parameters","text":"<ul> <li><code>asset_id</code> (int): ID of asset to delete</li> </ul>"},{"location":"resources/assets/#examples","title":"Examples","text":""},{"location":"resources/assets/#managing-text-assets","title":"Managing Text Assets","text":"<pre><code># Create a text asset\nconfig_asset = client.assets.create({\n    \"Name\": \"ApiEndpoint\",\n    \"ValueType\": \"Text\",\n    \"Value\": \"https://api.example.com/v1\",\n    \"Description\": \"API endpoint for production\",\n    \"ValueScope\": \"Global\"\n})\n\n# Update the endpoint\nclient.assets.update(config_asset[\"Id\"], {\n    \"Value\": \"https://api.example.com/v2\"\n})\n</code></pre>"},{"location":"resources/assets/#managing-credentials","title":"Managing Credentials","text":"<pre><code># Create a credential asset\ncred_asset = client.assets.create({\n    \"Name\": \"ApiCredentials\",\n    \"ValueType\": \"Credential\",\n    \"Value\": {\n        \"Username\": \"api_user\",\n        \"Password\": \"api_password\"\n    },\n    \"Description\": \"API authentication credentials\",\n    \"ValueScope\": \"Global\"\n})\n\n# Create Windows credentials\nwin_cred = client.assets.create({\n    \"Name\": \"WindowsAuth\",\n    \"ValueType\": \"WindowsCredential\",\n    \"Value\": {\n        \"Username\": \"domain\\\\user\",\n        \"Password\": \"password\"\n    },\n    \"Description\": \"Windows authentication for network resources\"\n})\n</code></pre>"},{"location":"resources/assets/#robot-specific-assets","title":"Robot-Specific Assets","text":"<pre><code># Create per-robot configuration\nrobot_config = client.assets.create({\n    \"Name\": \"ProcessingConfig\",\n    \"ValueType\": \"Text\",\n    \"Value\": \"default_config\",\n    \"ValueScope\": \"PerRobot\",\n    \"Description\": \"Robot-specific processing configuration\"\n})\n\n# Set robot-specific value\nclient.assets.set_robot_asset_value(\n    asset_id=robot_config[\"Id\"],\n    robot_id=456,\n    value=\"custom_config\"\n)\n</code></pre>"},{"location":"resources/assets/#managing-multiple-assets","title":"Managing Multiple Assets","text":"<pre><code># Create multiple related assets\ndef create_environment_assets(env_name: str, config: dict):\n    assets = []\n    for key, value in config.items():\n        asset = client.assets.create({\n            \"Name\": f\"{env_name}_{key}\",\n            \"ValueType\": \"Text\",\n            \"Value\": value,\n            \"Description\": f\"{key} for {env_name} environment\"\n        })\n        assets.append(asset)\n    return assets\n\n# Create production assets\nprod_config = {\n    \"DatabaseConnection\": \"Server=prod-db;Database=mydb;\",\n    \"ApiEndpoint\": \"https://api.prod.example.com\",\n    \"CacheServer\": \"prod-cache:6379\"\n}\nprod_assets = create_environment_assets(\"Production\", prod_config)\n</code></pre>"},{"location":"resources/assets/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to create asset with duplicate name\n    client.assets.create({\n        \"Name\": \"ExistingAsset\",\n        \"ValueType\": \"Text\",\n        \"Value\": \"test\"\n    })\nexcept HTTPError as e:\n    if e.response.status_code == 409:\n        print(\"Asset with this name already exists\")\n    else:\n        print(f\"Error creating asset: {e}\")\n</code></pre>"},{"location":"resources/assets/#best-practices","title":"Best Practices","text":"<ol> <li>Use meaningful asset names that reflect their purpose</li> <li>Include clear descriptions for better maintainability</li> <li>Use appropriate value types for different kinds of data</li> <li>Consider using <code>PerRobot</code> scope for configuration that varies by robot</li> <li>Protect sensitive information using Credential type assets</li> <li>Group related assets using consistent naming conventions</li> <li>Regularly review and update asset values</li> <li>Use error handling when working with assets</li> <li>Document asset dependencies in your processes</li> </ol>"},{"location":"resources/assets/#security-considerations","title":"Security Considerations","text":"<ol> <li>Use Credential/WindowsCredential types for sensitive data</li> <li>Limit access to assets using folder permissions</li> <li>Audit asset usage regularly</li> <li>Update credentials stored in assets periodically</li> <li>Be cautious with global-scope assets containing sensitive data</li> </ol>"},{"location":"resources/assets/#see-also","title":"See Also","text":"<ul> <li>UiPath Assets Documentation</li> <li>Managing Robot Assets</li> <li>Asset Security </li> </ul>"},{"location":"resources/audit/","title":"Audit","text":"<p>The Audit resource allows you to access and manage UiPath Orchestrator audit logs, tracking system changes, user actions, and security events.</p>"},{"location":"resources/audit/#related-resources","title":"Related Resources","text":"<ul> <li>Directory - User actions being audited</li> <li>Settings - System configuration changes</li> <li>Logs - Process execution logs</li> </ul>"},{"location":"resources/audit/#methods","title":"Methods","text":""},{"location":"resources/audit/#get_audit_logs","title":"get_audit_logs()","text":"<p>Get audit logs with optional filters.</p> <pre><code>logs = client.audit.get_audit_logs(\n    from_date=\"2023-01-01\",\n    to_date=\"2023-12-31\",\n    component=\"Settings\",\n    action=\"Update\"\n)\n</code></pre>"},{"location":"resources/audit/#parameters","title":"Parameters","text":"<ul> <li><code>from_date</code> (str, optional): Start date for logs (ISO format)</li> <li><code>to_date</code> (str, optional): End date for logs (ISO format)</li> <li><code>component</code> (str, optional): Filter by component</li> <li><code>action</code> (str, optional): Filter by action type</li> </ul>"},{"location":"resources/audit/#returns","title":"Returns","text":"<p>List[Dict]: List of audit log entries</p>"},{"location":"resources/audit/#get_audit_trail","title":"get_audit_trail()","text":"<p>Get detailed audit trail for a specific entity.</p> <pre><code>trail = client.audit.get_audit_trail(\n    entity_type=\"Robot\",\n    entity_id=123\n)\n</code></pre>"},{"location":"resources/audit/#parameters_1","title":"Parameters","text":"<ul> <li><code>entity_type</code> (str): Type of entity</li> <li><code>entity_id</code> (int): ID of the entity</li> </ul>"},{"location":"resources/audit/#returns_1","title":"Returns","text":"<p>List[Dict]: Audit trail entries</p>"},{"location":"resources/audit/#export_audit_logs","title":"export_audit_logs()","text":"<p>Export audit logs to a file.</p> <pre><code>client.audit.export_audit_logs(\n    from_date=\"2023-01-01\",\n    to_date=\"2023-12-31\",\n    format=\"CSV\"\n)\n</code></pre>"},{"location":"resources/audit/#parameters_2","title":"Parameters","text":"<ul> <li><code>from_date</code> (str): Start date for export</li> <li><code>to_date</code> (str): End date for export</li> <li><code>format</code> (str): Export format (\"CSV\" or \"JSON\")</li> </ul>"},{"location":"resources/audit/#examples","title":"Examples","text":""},{"location":"resources/audit/#security-audit","title":"Security Audit","text":"<pre><code>def audit_security_changes(days: int = 30):\n    \"\"\"Audit security-related changes\"\"\"\n    from datetime import datetime, timedelta\n\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days)\n\n    # Get security-related logs\n    logs = client.audit.get_audit_logs(\n        from_date=start_date.isoformat(),\n        to_date=end_date.isoformat(),\n        component=\"Security\"\n    )\n\n    # Analyze changes\n    findings = []\n    for log in logs:\n        if log[\"Action\"] in [\"PermissionChange\", \"RoleModification\", \"UserAccess\"]:\n            findings.append({\n                \"timestamp\": log[\"Timestamp\"],\n                \"user\": log[\"InitiatedBy\"],\n                \"action\": log[\"Action\"],\n                \"details\": log[\"Details\"],\n                \"severity\": \"high\"\n            })\n\n    return findings\n\n# Audit security changes\nsecurity_findings = audit_security_changes()\n</code></pre>"},{"location":"resources/audit/#configuration-change-tracking","title":"Configuration Change Tracking","text":"<pre><code>def track_config_changes():\n    \"\"\"Track configuration changes\"\"\"\n    # Get configuration change logs\n    logs = client.audit.get_audit_logs(\n        component=\"Settings\",\n        action=\"Update\"\n    )\n\n    # Group changes by user\n    changes_by_user = {}\n    for log in logs:\n        user = log[\"InitiatedBy\"]\n        if user not in changes_by_user:\n            changes_by_user[user] = []\n\n        changes_by_user[user].append({\n            \"timestamp\": log[\"Timestamp\"],\n            \"setting\": log[\"EntityType\"],\n            \"old_value\": log.get(\"OldValue\"),\n            \"new_value\": log.get(\"NewValue\")\n        })\n\n    return changes_by_user\n\n# Track configuration changes\nchanges = track_config_changes()\n</code></pre>"},{"location":"resources/audit/#user-activity-monitoring","title":"User Activity Monitoring","text":"<pre><code>def monitor_user_activity(user_id: int, days: int = 7):\n    \"\"\"Monitor specific user activity\"\"\"\n    from datetime import datetime, timedelta\n\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days)\n\n    # Get user's audit trail\n    trail = client.audit.get_audit_trail(\n        entity_type=\"User\",\n        entity_id=user_id\n    )\n\n    # Analyze activity\n    activity = {\n        \"login_attempts\": 0,\n        \"configuration_changes\": 0,\n        \"resource_access\": 0,\n        \"suspicious_actions\": []\n    }\n\n    for entry in trail:\n        if entry[\"Action\"] == \"Login\":\n            activity[\"login_attempts\"] += 1\n        elif entry[\"Action\"].endswith(\"Update\"):\n            activity[\"configuration_changes\"] += 1\n        elif entry[\"Action\"].startswith(\"Access\"):\n            activity[\"resource_access\"] += 1\n\n        # Check for suspicious activity\n        if entry.get(\"Status\") == \"Failed\" or entry.get(\"Severity\") == \"High\":\n            activity[\"suspicious_actions\"].append({\n                \"timestamp\": entry[\"Timestamp\"],\n                \"action\": entry[\"Action\"],\n                \"details\": entry[\"Details\"]\n            })\n\n    return activity\n\n# Monitor user activity\nactivity_report = monitor_user_activity(user_id=123)\n</code></pre>"},{"location":"resources/audit/#compliance-reporting","title":"Compliance Reporting","text":"<pre><code>def generate_compliance_report(report_period: str):\n    \"\"\"Generate compliance audit report\"\"\"\n    # Get all relevant audit logs\n    logs = client.audit.get_audit_logs()\n\n    report = {\n        \"period\": report_period,\n        \"generated_at\": datetime.now().isoformat(),\n        \"summary\": {\n            \"total_events\": len(logs),\n            \"security_events\": 0,\n            \"compliance_violations\": 0,\n            \"user_access_events\": 0\n        },\n        \"violations\": [],\n        \"access_patterns\": {}\n    }\n\n    # Analyze logs\n    for log in logs:\n        # Track security events\n        if log[\"Component\"] == \"Security\":\n            report[\"summary\"][\"security_events\"] += 1\n\n        # Track access events\n        if log[\"Action\"].startswith(\"Access\"):\n            report[\"summary\"][\"user_access_events\"] += 1\n            user = log[\"InitiatedBy\"]\n            if user not in report[\"access_patterns\"]:\n                report[\"access_patterns\"][user] = 0\n            report[\"access_patterns\"][user] += 1\n\n        # Track compliance violations\n        if log.get(\"ComplianceStatus\") == \"Violation\":\n            report[\"summary\"][\"compliance_violations\"] += 1\n            report[\"violations\"].append({\n                \"timestamp\": log[\"Timestamp\"],\n                \"user\": log[\"InitiatedBy\"],\n                \"action\": log[\"Action\"],\n                \"details\": log[\"Details\"]\n            })\n\n    return report\n\n# Generate compliance report\nreport = generate_compliance_report(\"Q4 2023\")\n</code></pre>"},{"location":"resources/audit/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to access audit logs\n    logs = client.audit.get_audit_logs(\n        from_date=\"2023-01-01\",\n        to_date=\"2023-12-31\"\n    )\nexcept HTTPError as e:\n    if e.response.status_code == 403:\n        print(\"Insufficient permissions to access audit logs\")\n    elif e.response.status_code == 400:\n        print(\"Invalid date range\")\n    else:\n        print(f\"Error accessing audit logs: {e}\")\n</code></pre>"},{"location":"resources/audit/#best-practices","title":"Best Practices","text":"<ol> <li>Regular audit log review</li> <li>Set appropriate retention periods</li> <li>Monitor security events</li> <li>Document audit findings</li> <li>Maintain audit trails</li> <li>Export logs regularly</li> <li>Track configuration changes</li> <li>Monitor user activity</li> <li>Generate compliance reports</li> </ol>"},{"location":"resources/audit/#security-considerations","title":"Security Considerations","text":"<ol> <li>Protect audit logs</li> <li>Control audit access</li> <li>Monitor unauthorized access</li> <li>Secure log exports</li> <li>Maintain log integrity</li> <li>Track sensitive operations</li> <li>Regular security audits</li> </ol>"},{"location":"resources/audit/#see-also","title":"See Also","text":"<ul> <li>UiPath Audit Documentation</li> <li>Security Auditing</li> <li>Compliance</li> <li>Directory for user management</li> <li>Settings for configuration </li> </ul>"},{"location":"resources/directory/","title":"Directory","text":"<p>The Directory resource allows you to manage users, groups, and roles in UiPath Orchestrator. It provides functionality for user authentication, authorization, and organizational structure management.</p>"},{"location":"resources/directory/#related-resources","title":"Related Resources","text":"<ul> <li>Robots - Robots associated with users</li> <li>Assets - Assets with user-specific permissions</li> <li>Folders - Folders with user access controls</li> </ul>"},{"location":"resources/directory/#methods","title":"Methods","text":""},{"location":"resources/directory/#get_users","title":"get_users()","text":"<p>Get a list of users with optional filters.</p> <pre><code>users = client.directory.get_users(\n    username=\"john.doe\",     # Filter by username\n    email=\"john@example.com\" # Filter by email\n)\n</code></pre>"},{"location":"resources/directory/#parameters","title":"Parameters","text":"<ul> <li><code>username</code> (str, optional): Filter by username</li> <li><code>email</code> (str, optional): Filter by email address</li> </ul>"},{"location":"resources/directory/#returns","title":"Returns","text":"<p>List[Dict]: List of user objects matching the filters</p>"},{"location":"resources/directory/#get_user_by_id","title":"get_user_by_id()","text":"<p>Get a specific user by ID.</p> <pre><code>user = client.directory.get_user_by_id(123)\n</code></pre>"},{"location":"resources/directory/#parameters_1","title":"Parameters","text":"<ul> <li><code>user_id</code> (int): ID of the user to retrieve</li> </ul>"},{"location":"resources/directory/#returns_1","title":"Returns","text":"<p>Dict: User details</p>"},{"location":"resources/directory/#get_domains","title":"get_domains()","text":"<p>Get available authentication domains.</p> <pre><code>domains = client.directory.get_domains()\n</code></pre>"},{"location":"resources/directory/#returns_2","title":"Returns","text":"<p>List[Dict]: List of available domains</p>"},{"location":"resources/directory/#search_users_and_groups","title":"search_users_and_groups()","text":"<p>Search for users and groups.</p> <pre><code>results = client.directory.search_users_and_groups(\n    search_context=\"Users\",    # Search context (Users, Groups)\n    domain=\"mydomain\",        # Domain to search in\n    prefix=\"john\"            # Search prefix\n)\n</code></pre>"},{"location":"resources/directory/#parameters_2","title":"Parameters","text":"<ul> <li><code>search_context</code> (str): Context to search in (Users, Groups)</li> <li><code>domain</code> (str): Domain to search in</li> <li><code>prefix</code> (str): Search prefix</li> </ul>"},{"location":"resources/directory/#returns_3","title":"Returns","text":"<p>List[Dict]: Search results</p>"},{"location":"resources/directory/#get_permissions","title":"get_permissions()","text":"<p>Get permissions for a user.</p> <pre><code>permissions = client.directory.get_permissions(\n    username=\"john.doe\",\n    domain=\"mydomain\"\n)\n</code></pre>"},{"location":"resources/directory/#parameters_3","title":"Parameters","text":"<ul> <li><code>username</code> (str): Username to check permissions for</li> <li><code>domain</code> (str): User's domain</li> </ul>"},{"location":"resources/directory/#returns_4","title":"Returns","text":"<p>Dict: User permissions</p>"},{"location":"resources/directory/#assign_role","title":"assign_role()","text":"<p>Assign a role to a user.</p> <pre><code>client.directory.assign_role(\n    user_id=123,\n    role_id=456\n)\n</code></pre>"},{"location":"resources/directory/#parameters_4","title":"Parameters","text":"<ul> <li><code>user_id</code> (int): ID of the user</li> <li><code>role_id</code> (int): ID of the role to assign</li> </ul>"},{"location":"resources/directory/#remove_role","title":"remove_role()","text":"<p>Remove a role from a user.</p> <pre><code>client.directory.remove_role(\n    user_id=123,\n    role_id=456\n)\n</code></pre>"},{"location":"resources/directory/#parameters_5","title":"Parameters","text":"<ul> <li><code>user_id</code> (int): ID of the user</li> <li><code>role_id</code> (int): ID of the role to remove</li> </ul>"},{"location":"resources/directory/#examples","title":"Examples","text":""},{"location":"resources/directory/#user-management","title":"User Management","text":"<pre><code># Search for users\nusers = client.directory.search_users_and_groups(\n    search_context=\"Users\",\n    domain=\"mydomain\",\n    prefix=\"john\"\n)\n\n# Get user details and permissions\nfor user in users:\n    permissions = client.directory.get_permissions(\n        username=user[\"Username\"],\n        domain=user[\"Domain\"]\n    )\n    print(f\"User: {user['Username']}\")\n    print(f\"Permissions: {permissions}\")\n</code></pre>"},{"location":"resources/directory/#role-assignment","title":"Role Assignment","text":"<pre><code>def setup_user_roles(username: str, domain: str, roles: List[int]):\n    # Find user\n    users = client.directory.search_users_and_groups(\n        search_context=\"Users\",\n        domain=domain,\n        prefix=username\n    )\n\n    if not users:\n        raise ValueError(f\"User {username} not found\")\n\n    user = users[0]\n\n    # Get current permissions\n    current_perms = client.directory.get_permissions(\n        username=user[\"Username\"],\n        domain=user[\"Domain\"]\n    )\n\n    # Remove existing roles\n    for role in current_perms.get(\"Roles\", []):\n        client.directory.remove_role(\n            user_id=user[\"Id\"],\n            role_id=role[\"Id\"]\n        )\n\n    # Assign new roles\n    for role_id in roles:\n        client.directory.assign_role(\n            user_id=user[\"Id\"],\n            role_id=role_id\n        )\n\n# Setup roles for user\nsetup_user_roles(\n    username=\"john.doe\",\n    domain=\"mydomain\",\n    roles=[123, 456]  # Role IDs\n)\n</code></pre>"},{"location":"resources/directory/#domain-management","title":"Domain Management","text":"<pre><code>def validate_domain_access():\n    # Get available domains\n    domains = client.directory.get_domains()\n\n    # Check each domain\n    results = {}\n    for domain in domains:\n        try:\n            # Try to search in domain\n            users = client.directory.search_users_and_groups(\n                search_context=\"Users\",\n                domain=domain[\"Name\"],\n                prefix=\"test\"\n            )\n            results[domain[\"Name\"]] = \"accessible\"\n        except Exception as e:\n            results[domain[\"Name\"]] = f\"error: {str(e)}\"\n\n    return results\n\n# Check domain access\ndomain_status = validate_domain_access()\n</code></pre>"},{"location":"resources/directory/#user-permission-audit","title":"User Permission Audit","text":"<pre><code>def audit_user_permissions(username: str, domain: str):\n    # Get user permissions\n    permissions = client.directory.get_permissions(\n        username=username,\n        domain=domain\n    )\n\n    # Analyze permissions\n    audit_results = {\n        \"username\": username,\n        \"domain\": domain,\n        \"roles\": permissions.get(\"Roles\", []),\n        \"permissions\": permissions.get(\"Permissions\", []),\n        \"timestamp\": datetime.now().isoformat()\n    }\n\n    # Log audit results\n    with open(\"permission_audit.log\", \"a\") as f:\n        f.write(json.dumps(audit_results) + \"\\n\")\n\n    return audit_results\n\n# Audit user permissions\naudit = audit_user_permissions(\"john.doe\", \"mydomain\")\n</code></pre>"},{"location":"resources/directory/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to get permissions for non-existent user\n    client.directory.get_permissions(\n        username=\"nonexistent\",\n        domain=\"mydomain\"\n    )\nexcept HTTPError as e:\n    if e.response.status_code == 404:\n        print(\"User not found\")\n    elif e.response.status_code == 403:\n        print(\"Permission denied\")\n    else:\n        print(f\"Error checking permissions: {e}\")\n</code></pre>"},{"location":"resources/directory/#best-practices","title":"Best Practices","text":"<ol> <li>Use domain-qualified usernames</li> <li>Implement role-based access control</li> <li>Regularly audit user permissions</li> <li>Remove unused roles and permissions</li> <li>Document role assignments</li> <li>Use group-based permissions where possible</li> <li>Regular permission reviews</li> <li>Monitor permission changes</li> <li>Maintain user lifecycle management</li> </ol>"},{"location":"resources/directory/#security-considerations","title":"Security Considerations","text":"<ol> <li>Principle of least privilege</li> <li>Regular access reviews</li> <li>Monitor failed authentication attempts</li> <li>Audit permission changes</li> <li>Secure role management</li> <li>Password policy enforcement</li> <li>User activity monitoring</li> </ol>"},{"location":"resources/directory/#see-also","title":"See Also","text":"<ul> <li>UiPath Directory Documentation</li> <li>Role-Based Access Control</li> <li>Security Best Practices</li> <li>Robots for robot-user associations</li> <li>Assets for permission-controlled assets </li> </ul>"},{"location":"resources/environments/","title":"Environments","text":"<p>The Environments resource allows you to manage UiPath Orchestrator environments, which are logical groupings of resources like robots, processes, and assets for different deployment stages or business units.</p>"},{"location":"resources/environments/#related-resources","title":"Related Resources","text":"<ul> <li>Robots - Robots assigned to environments</li> <li>Processes - Processes deployed to environments</li> <li>Assets - Assets configured per environment</li> <li>Releases - Releases deployed to environments</li> </ul>"},{"location":"resources/environments/#methods","title":"Methods","text":""},{"location":"resources/environments/#get","title":"get()","text":"<p>Get a list of environments with optional filters.</p> <pre><code>environments = client.environments.get(\n    name=\"Production\",          # Filter by name\n    organization_unit_id=123    # Filter by organization unit\n)\n</code></pre>"},{"location":"resources/environments/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str, optional): Filter by environment name</li> <li><code>organization_unit_id</code> (int, optional): Filter by organization unit ID</li> </ul>"},{"location":"resources/environments/#returns","title":"Returns","text":"<p>List[Dict]: List of environment objects matching the filters</p>"},{"location":"resources/environments/#get_by_id","title":"get_by_id()","text":"<p>Get a specific environment by ID.</p> <pre><code>environment = client.environments.get_by_id(123)\n</code></pre>"},{"location":"resources/environments/#parameters_1","title":"Parameters","text":"<ul> <li><code>environment_id</code> (int): ID of the environment to retrieve</li> </ul>"},{"location":"resources/environments/#returns_1","title":"Returns","text":"<p>Dict: Environment details</p>"},{"location":"resources/environments/#create","title":"create()","text":"<p>Create a new environment.</p> <pre><code>environment = client.environments.create({\n    \"Name\": \"Production\",\n    \"Description\": \"Production environment\",\n    \"Type\": \"Standard\",\n    \"OrganizationUnitId\": 123\n})\n</code></pre>"},{"location":"resources/environments/#parameters_2","title":"Parameters","text":"<ul> <li><code>environment_data</code> (Dict): Environment configuration including:</li> <li><code>Name</code> (str, required): Environment name</li> <li><code>Description</code> (str, optional): Environment description</li> <li><code>Type</code> (str, optional): Environment type</li> <li><code>OrganizationUnitId</code> (int, optional): Organization unit ID</li> </ul>"},{"location":"resources/environments/#returns_2","title":"Returns","text":"<p>Dict: Created environment details</p>"},{"location":"resources/environments/#update","title":"update()","text":"<p>Update an existing environment.</p> <pre><code>client.environments.update(123, {\n    \"Name\": \"Production-2023\",\n    \"Description\": \"Updated production environment\"\n})\n</code></pre>"},{"location":"resources/environments/#parameters_3","title":"Parameters","text":"<ul> <li><code>environment_id</code> (int): ID of environment to update</li> <li><code>environment_data</code> (Dict): Updated environment data</li> </ul>"},{"location":"resources/environments/#delete","title":"delete()","text":"<p>Delete an environment.</p> <pre><code>client.environments.delete(123)\n</code></pre>"},{"location":"resources/environments/#parameters_4","title":"Parameters","text":"<ul> <li><code>environment_id</code> (int): ID of environment to delete</li> </ul>"},{"location":"resources/environments/#examples","title":"Examples","text":""},{"location":"resources/environments/#environment-setup","title":"Environment Setup","text":"<pre><code>def setup_deployment_environments():\n    \"\"\"Setup standard deployment environments\"\"\"\n    environments = {\n        \"Development\": {\n            \"Description\": \"Development and testing environment\",\n            \"Type\": \"Development\"\n        },\n        \"Staging\": {\n            \"Description\": \"Pre-production validation environment\",\n            \"Type\": \"Staging\"\n        },\n        \"Production\": {\n            \"Description\": \"Production environment\",\n            \"Type\": \"Production\"\n        }\n    }\n\n    created_envs = {}\n    for name, config in environments.items():\n        try:\n            env = client.environments.create({\n                \"Name\": name,\n                \"Description\": config[\"Description\"],\n                \"Type\": config[\"Type\"]\n            })\n            created_envs[name] = env\n\n        except Exception as e:\n            print(f\"Error creating environment {name}: {e}\")\n\n    return created_envs\n\n# Setup environments\nenvironments = setup_deployment_environments()\n</code></pre>"},{"location":"resources/environments/#resource-assignment","title":"Resource Assignment","text":"<pre><code>def assign_resources_to_environment(environment_id: int, resources: Dict):\n    \"\"\"Assign resources to an environment\"\"\"\n    results = {\n        \"robots\": [],\n        \"processes\": [],\n        \"assets\": []\n    }\n\n    # Assign robots\n    for robot_id in resources.get(\"robot_ids\", []):\n        try:\n            client.robots.update(robot_id, {\n                \"EnvironmentId\": environment_id\n            })\n            results[\"robots\"].append({\n                \"robot_id\": robot_id,\n                \"status\": \"assigned\"\n            })\n        except Exception as e:\n            results[\"robots\"].append({\n                \"robot_id\": robot_id,\n                \"status\": \"error\",\n                \"error\": str(e)\n            })\n\n    # Assign processes\n    for process in resources.get(\"processes\", []):\n        try:\n            client.processes.deploy({\n                \"ProcessKey\": process[\"key\"],\n                \"EnvironmentId\": environment_id\n            })\n            results[\"processes\"].append({\n                \"process\": process[\"key\"],\n                \"status\": \"deployed\"\n            })\n        except Exception as e:\n            results[\"processes\"].append({\n                \"process\": process[\"key\"],\n                \"status\": \"error\",\n                \"error\": str(e)\n            })\n\n    return results\n\n# Assign resources\nresources = {\n    \"robot_ids\": [123, 456],\n    \"processes\": [\n        {\"key\": \"InvoiceProcess\"},\n        {\"key\": \"PayrollProcess\"}\n    ]\n}\nassignments = assign_resources_to_environment(789, resources)\n</code></pre>"},{"location":"resources/environments/#environment-promotion","title":"Environment Promotion","text":"<pre><code>def promote_to_production(staging_env_id: int, prod_env_id: int):\n    \"\"\"Promote resources from staging to production\"\"\"\n    # Get staging resources\n    staging_robots = client.robots.get(environment_id=staging_env_id)\n    staging_processes = client.processes.get(environment_id=staging_env_id)\n\n    # Promote each resource\n    promotions = {\n        \"robots\": [],\n        \"processes\": [],\n        \"status\": \"in_progress\"\n    }\n\n    try:\n        # Promote robots\n        for robot in staging_robots:\n            prod_robot = client.robots.create({\n                \"Name\": f\"PROD_{robot['Name']}\",\n                \"Type\": robot[\"Type\"],\n                \"EnvironmentId\": prod_env_id\n            })\n            promotions[\"robots\"].append({\n                \"staging_id\": robot[\"Id\"],\n                \"production_id\": prod_robot[\"Id\"]\n            })\n\n        # Promote processes\n        for process in staging_processes:\n            prod_process = client.processes.deploy({\n                \"ProcessKey\": process[\"Key\"],\n                \"EnvironmentId\": prod_env_id,\n                \"Version\": process[\"Version\"]\n            })\n            promotions[\"processes\"].append({\n                \"key\": process[\"Key\"],\n                \"status\": \"promoted\"\n            })\n\n        promotions[\"status\"] = \"completed\"\n\n    except Exception as e:\n        promotions[\"status\"] = \"error\"\n        promotions[\"error\"] = str(e)\n\n    return promotions\n\n# Promote to production\npromotion_results = promote_to_production(\n    staging_env_id=456,\n    prod_env_id=789\n)\n</code></pre>"},{"location":"resources/environments/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to create environment with duplicate name\n    client.environments.create({\n        \"Name\": \"ExistingEnvironment\",\n        \"Type\": \"Production\"\n    })\nexcept HTTPError as e:\n    if e.response.status_code == 409:\n        print(\"Environment with this name already exists\")\n    elif e.response.status_code == 400:\n        print(\"Invalid environment configuration\")\n    else:\n        print(f\"Error creating environment: {e}\")\n</code></pre>"},{"location":"resources/environments/#best-practices","title":"Best Practices","text":"<ol> <li>Use consistent naming conventions</li> <li>Maintain clear environment separation</li> <li>Document environment purposes</li> <li>Control access per environment</li> <li>Regular environment cleanup</li> <li>Test promotion processes</li> <li>Monitor environment usage</li> <li>Backup environment configs</li> <li>Version control configurations</li> </ol>"},{"location":"resources/environments/#security-considerations","title":"Security Considerations","text":"<ol> <li>Restrict environment access</li> <li>Separate production access</li> <li>Audit environment changes</li> <li>Secure configuration data</li> <li>Monitor resource usage</li> <li>Control promotion process</li> <li>Regular security reviews</li> </ol>"},{"location":"resources/environments/#see-also","title":"See Also","text":"<ul> <li>UiPath Environments Documentation</li> <li>Environment Management</li> <li>Environment Security</li> <li>Robots for robot management</li> <li>Processes for process deployment </li> </ul>"},{"location":"resources/folders/","title":"Folders","text":"<p>The Folders resource allows you to manage organizational units in UiPath Orchestrator. Folders help organize resources and control access to processes, robots, and assets.</p>"},{"location":"resources/folders/#related-resources","title":"Related Resources","text":"<ul> <li>Directory - User and group permissions for folders</li> <li>Assets - Assets organized in folders</li> <li>Robots - Robots assigned to folders</li> <li>Processes - Processes organized in folders</li> </ul>"},{"location":"resources/folders/#methods","title":"Methods","text":""},{"location":"resources/folders/#get","title":"get()","text":"<p>Get a list of folders with optional filters.</p> <pre><code>folders = client.folders.get(\n    display_name=\"Production\",    # Filter by display name\n    parent_id=123                # Filter by parent folder ID\n)\n</code></pre>"},{"location":"resources/folders/#parameters","title":"Parameters","text":"<ul> <li><code>display_name</code> (str, optional): Filter by folder display name</li> <li><code>parent_id</code> (int, optional): Filter by parent folder ID</li> </ul>"},{"location":"resources/folders/#returns","title":"Returns","text":"<p>List[Dict]: List of folder objects matching the filters</p>"},{"location":"resources/folders/#get_by_id","title":"get_by_id()","text":"<p>Get a specific folder by ID.</p> <pre><code>folder = client.folders.get_by_id(123)\n</code></pre>"},{"location":"resources/folders/#parameters_1","title":"Parameters","text":"<ul> <li><code>folder_id</code> (int): ID of the folder to retrieve</li> </ul>"},{"location":"resources/folders/#returns_1","title":"Returns","text":"<p>Dict: Folder details</p>"},{"location":"resources/folders/#create","title":"create()","text":"<p>Create a new folder.</p> <pre><code>folder = client.folders.create({\n    \"DisplayName\": \"Production\",\n    \"Description\": \"Production environment resources\",\n    \"ParentId\": 123,  # Optional parent folder ID\n    \"ProvisionType\": \"Manual\"\n})\n</code></pre>"},{"location":"resources/folders/#parameters_2","title":"Parameters","text":"<ul> <li><code>folder_data</code> (Dict): Folder configuration including:</li> <li><code>DisplayName</code> (str, required): Folder name</li> <li><code>Description</code> (str, optional): Folder description</li> <li><code>ParentId</code> (int, optional): Parent folder ID</li> <li><code>ProvisionType</code> (str, optional): Provisioning type (Manual, Automatic)</li> </ul>"},{"location":"resources/folders/#returns_2","title":"Returns","text":"<p>Dict: Created folder details</p>"},{"location":"resources/folders/#update","title":"update()","text":"<p>Update an existing folder.</p> <pre><code>client.folders.update(123, {\n    \"DisplayName\": \"Production-2023\",\n    \"Description\": \"Updated production environment\"\n})\n</code></pre>"},{"location":"resources/folders/#parameters_3","title":"Parameters","text":"<ul> <li><code>folder_id</code> (int): ID of folder to update</li> <li><code>folder_data</code> (Dict): Updated folder data</li> </ul>"},{"location":"resources/folders/#returns_3","title":"Returns","text":"<p>Dict: Updated folder details</p>"},{"location":"resources/folders/#delete","title":"delete()","text":"<p>Delete a folder.</p> <pre><code>client.folders.delete(123)\n</code></pre>"},{"location":"resources/folders/#parameters_4","title":"Parameters","text":"<ul> <li><code>folder_id</code> (int): ID of folder to delete</li> </ul>"},{"location":"resources/folders/#assign_users","title":"assign_users()","text":"<p>Assign users to a folder.</p> <pre><code>client.folders.assign_users(123, [\n    {\"UserId\": 456, \"RoleId\": 789}\n])\n</code></pre>"},{"location":"resources/folders/#parameters_5","title":"Parameters","text":"<ul> <li><code>folder_id</code> (int): ID of the folder</li> <li><code>assignments</code> (List[Dict]): List of user-role assignments</li> </ul>"},{"location":"resources/folders/#get_users","title":"get_users()","text":"<p>Get users assigned to a folder.</p> <pre><code>users = client.folders.get_users(123)\n</code></pre>"},{"location":"resources/folders/#parameters_6","title":"Parameters","text":"<ul> <li><code>folder_id</code> (int): ID of the folder</li> </ul>"},{"location":"resources/folders/#returns_4","title":"Returns","text":"<p>List[Dict]: List of users assigned to the folder</p>"},{"location":"resources/folders/#examples","title":"Examples","text":""},{"location":"resources/folders/#folder-hierarchy-management","title":"Folder Hierarchy Management","text":"<pre><code>def create_folder_structure(structure: dict, parent_id: Optional[int] = None):\n    \"\"\"Create a hierarchical folder structure\"\"\"\n    created_folders = {}\n\n    for name, subfolders in structure.items():\n        # Create parent folder\n        folder = client.folders.create({\n            \"DisplayName\": name,\n            \"Description\": f\"Created as part of hierarchy\",\n            \"ParentId\": parent_id\n        })\n        created_folders[name] = folder\n\n        # Create subfolders recursively\n        if isinstance(subfolders, dict):\n            subfolder_results = create_folder_structure(\n                subfolders,\n                parent_id=folder[\"Id\"]\n            )\n            created_folders.update(subfolder_results)\n\n    return created_folders\n\n# Create folder hierarchy\nstructure = {\n    \"Production\": {\n        \"Finance\": {},\n        \"HR\": {},\n        \"Operations\": {\n            \"EMEA\": {},\n            \"APAC\": {},\n            \"Americas\": {}\n        }\n    }\n}\nfolders = create_folder_structure(structure)\n</code></pre>"},{"location":"resources/folders/#user-access-management","title":"User Access Management","text":"<pre><code>def setup_folder_access(folder_id: int, user_assignments: List[Dict]):\n    \"\"\"Setup user access for a folder\"\"\"\n    # Get current users\n    current_users = client.folders.get_users(folder_id)\n\n    # Remove existing assignments\n    for user in current_users:\n        client.folders.remove_user(\n            folder_id=folder_id,\n            user_id=user[\"UserId\"]\n        )\n\n    # Add new assignments\n    client.folders.assign_users(folder_id, user_assignments)\n\n    return client.folders.get_users(folder_id)\n\n# Setup folder access\nassignments = [\n    {\"UserId\": 123, \"RoleId\": 456},  # Admin role\n    {\"UserId\": 789, \"RoleId\": 101}   # User role\n]\nusers = setup_folder_access(folder_id=123, user_assignments=assignments)\n</code></pre>"},{"location":"resources/folders/#resource-organization","title":"Resource Organization","text":"<pre><code>def organize_resources(folder_name: str):\n    \"\"\"Create and organize resources in a folder\"\"\"\n    # Create folder\n    folder = client.folders.create({\n        \"DisplayName\": folder_name,\n        \"Description\": \"Organized resources folder\"\n    })\n\n    # Create assets in folder\n    asset = client.assets.create({\n        \"Name\": f\"{folder_name}_Config\",\n        \"ValueType\": \"Text\",\n        \"Value\": \"configuration\",\n        \"FolderId\": folder[\"Id\"]\n    })\n\n    # Upload process to folder\n    process = client.processes.upload(\n        \"Process.nupkg\",\n        folder_id=folder[\"Id\"]\n    )\n\n    return {\n        \"folder\": folder,\n        \"asset\": asset,\n        \"process\": process\n    }\n\n# Organize resources\nresources = organize_resources(\"Project_A\")\n</code></pre>"},{"location":"resources/folders/#folder-cleanup","title":"Folder Cleanup","text":"<pre><code>def cleanup_empty_folders(parent_id: Optional[int] = None):\n    \"\"\"Remove empty folders\"\"\"\n    folders = client.folders.get(parent_id=parent_id)\n\n    for folder in folders:\n        # Check for subfolders\n        subfolders = client.folders.get(parent_id=folder[\"Id\"])\n        if subfolders:\n            cleanup_empty_folders(folder[\"Id\"])\n\n        # Check if folder is empty\n        assets = client.assets.get(folder_id=folder[\"Id\"])\n        processes = client.processes.get(folder_id=folder[\"Id\"])\n        robots = client.robots.get(folder_id=folder[\"Id\"])\n\n        if not (assets or processes or robots or subfolders):\n            print(f\"Deleting empty folder: {folder['DisplayName']}\")\n            client.folders.delete(folder[\"Id\"])\n\n# Clean up empty folders\ncleanup_empty_folders()\n</code></pre>"},{"location":"resources/folders/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to delete non-empty folder\n    client.folders.delete(123)\nexcept HTTPError as e:\n    if e.response.status_code == 409:\n        print(\"Cannot delete non-empty folder\")\n    elif e.response.status_code == 404:\n        print(\"Folder not found\")\n    else:\n        print(f\"Error managing folder: {e}\")\n</code></pre>"},{"location":"resources/folders/#best-practices","title":"Best Practices","text":"<ol> <li>Use consistent naming conventions</li> <li>Implement logical hierarchy</li> <li>Control folder access carefully</li> <li>Document folder structure</li> <li>Regular access audits</li> <li>Clean up unused folders</li> <li>Maintain folder organization</li> <li>Use descriptive folder names</li> <li>Consider resource relationships</li> </ol>"},{"location":"resources/folders/#security-considerations","title":"Security Considerations","text":"<ol> <li>Implement proper access controls</li> <li>Regular permission audits</li> <li>Monitor folder access</li> <li>Secure sensitive resources</li> <li>Document access policies</li> <li>Control folder creation</li> <li>Maintain audit trails</li> </ol>"},{"location":"resources/folders/#see-also","title":"See Also","text":"<ul> <li>UiPath Folders Documentation</li> <li>Folder Management</li> <li>Folder Security</li> <li>Directory for user management</li> <li>Assets for resource management </li> </ul>"},{"location":"resources/jobs/","title":"Jobs","text":"<p>The Jobs resource allows you to manage and monitor process executions in UiPath Orchestrator.</p>"},{"location":"resources/jobs/#related-resources","title":"Related Resources","text":"<ul> <li>Robots - Robots that execute jobs</li> <li>Processes - Processes that can be executed as jobs</li> <li>Releases - Process releases that jobs run</li> <li>Queues - Queue items that can trigger jobs</li> </ul>"},{"location":"resources/jobs/#methods","title":"Methods","text":""},{"location":"resources/jobs/#get","title":"get()","text":"<p>Get a list of jobs with optional filters.</p> <pre><code>jobs = client.jobs.get(\n    state=\"Successful\",          # Filter by job state\n    robot_name=\"MyRobot\",        # Filter by robot name\n    start_time=\"2023-01-01\",     # Filter by start time\n    end_time=\"2023-12-31\"        # Filter by end time\n)\n</code></pre>"},{"location":"resources/jobs/#parameters","title":"Parameters","text":"<ul> <li><code>state</code> (str, optional): Filter by job state. Valid values:</li> <li><code>Pending</code></li> <li><code>Running</code></li> <li><code>Successful</code></li> <li><code>Faulted</code></li> <li><code>Stopped</code></li> <li><code>Suspended</code></li> <li><code>Resuming</code></li> <li><code>robot_name</code> (str, optional): Filter by robot name</li> <li><code>start_time</code> (str, optional): Filter by start time (ISO format)</li> <li><code>end_time</code> (str, optional): Filter by end time (ISO format)</li> <li><code>process_name</code> (str, optional): Filter by process name</li> <li><code>source</code> (str, optional): Filter by job source</li> </ul>"},{"location":"resources/jobs/#returns","title":"Returns","text":"<p>List[Dict]: List of job objects matching the filters</p>"},{"location":"resources/jobs/#get_by_id","title":"get_by_id()","text":"<p>Get a specific job by ID.</p> <pre><code>job = client.jobs.get_by_id(123)\n</code></pre>"},{"location":"resources/jobs/#parameters_1","title":"Parameters","text":"<ul> <li><code>job_id</code> (int): ID of the job to retrieve</li> </ul>"},{"location":"resources/jobs/#returns_1","title":"Returns","text":"<p>Dict: Job details</p>"},{"location":"resources/jobs/#start_jobs","title":"start_jobs()","text":"<p>Start one or more jobs.</p> <pre><code>jobs = client.jobs.start_jobs({\n    \"startInfo\": {\n        \"ReleaseKey\": \"release_key\",\n        \"Strategy\": \"Specific\",\n        \"RobotIds\": [123, 456],\n        \"InputArguments\": {\n            \"param1\": \"value1\"\n        }\n    }\n})\n</code></pre>"},{"location":"resources/jobs/#parameters_2","title":"Parameters","text":"<ul> <li><code>start_info</code> (Dict): Job start configuration including:</li> <li><code>ReleaseKey</code> (str, required): Release key to execute</li> <li><code>Strategy</code> (str, required): Robot selection strategy</li> <li><code>RobotIds</code> (List[int], optional): Specific robots to use</li> <li><code>InputArguments</code> (Dict, optional): Process input parameters</li> </ul>"},{"location":"resources/jobs/#returns_2","title":"Returns","text":"<p>Dict: Started job details</p> <p>[... continue with other methods and examples ...] </p>"},{"location":"resources/libraries/","title":"Libraries","text":"<p>The Libraries resource allows you to manage UiPath libraries (packages) in Orchestrator. Libraries are reusable components that can be shared across multiple automation projects.</p>"},{"location":"resources/libraries/#related-resources","title":"Related Resources","text":"<ul> <li>Processes - Processes that use libraries</li> <li>Packages - Similar package management</li> <li>Releases - Releases that depend on libraries</li> </ul>"},{"location":"resources/libraries/#methods","title":"Methods","text":""},{"location":"resources/libraries/#get","title":"get()","text":"<p>Get a list of libraries with optional filters.</p> <pre><code>libraries = client.libraries.get(\n    version=\"1.0.0\",          # Filter by version\n    title=\"MyLibrary\",       # Filter by package title\n    is_latest=True          # Filter for latest versions\n)\n</code></pre>"},{"location":"resources/libraries/#parameters","title":"Parameters","text":"<ul> <li><code>version</code> (str, optional): Filter by version</li> <li><code>title</code> (str, optional): Filter by package title</li> <li><code>is_latest</code> (bool, optional): Filter for latest versions only</li> </ul>"},{"location":"resources/libraries/#returns","title":"Returns","text":"<p>List[Dict]: List of library objects matching the filters</p>"},{"location":"resources/libraries/#get_by_id","title":"get_by_id()","text":"<p>Get a specific library by ID.</p> <pre><code>library = client.libraries.get_by_id(123)\n</code></pre>"},{"location":"resources/libraries/#parameters_1","title":"Parameters","text":"<ul> <li><code>library_id</code> (int): ID of the library to retrieve</li> </ul>"},{"location":"resources/libraries/#returns_1","title":"Returns","text":"<p>Dict: Library details</p>"},{"location":"resources/libraries/#upload","title":"upload()","text":"<p>Upload a new library package (.nupkg file).</p> <pre><code>library = client.libraries.upload(\"MyLibrary.1.0.0.nupkg\")\n</code></pre>"},{"location":"resources/libraries/#parameters_2","title":"Parameters","text":"<ul> <li><code>file_path</code> (str): Path to the .nupkg file</li> </ul>"},{"location":"resources/libraries/#returns_2","title":"Returns","text":"<p>Dict: Uploaded library details</p>"},{"location":"resources/libraries/#upload_stream","title":"upload_stream()","text":"<p>Upload a library from a file stream.</p> <pre><code>with open(\"MyLibrary.nupkg\", \"rb\") as f:\n    library = client.libraries.upload_stream(\n        file_stream=f,\n        filename=\"MyLibrary.nupkg\"\n    )\n</code></pre>"},{"location":"resources/libraries/#parameters_3","title":"Parameters","text":"<ul> <li><code>file_stream</code> (BinaryIO): File-like object containing the library package</li> <li><code>filename</code> (str): Name of the file</li> </ul>"},{"location":"resources/libraries/#returns_3","title":"Returns","text":"<p>Dict: Uploaded library details</p>"},{"location":"resources/libraries/#download","title":"download()","text":"<p>Download a library package.</p> <pre><code>content = client.libraries.download(123)\nwith open(\"MyLibrary.nupkg\", \"wb\") as f:\n    f.write(content)\n</code></pre>"},{"location":"resources/libraries/#parameters_4","title":"Parameters","text":"<ul> <li><code>library_id</code> (int): ID of the library to download</li> </ul>"},{"location":"resources/libraries/#returns_4","title":"Returns","text":"<p>bytes: The library package content</p>"},{"location":"resources/libraries/#delete","title":"delete()","text":"<p>Delete a library.</p> <pre><code>client.libraries.delete(123)\n</code></pre>"},{"location":"resources/libraries/#parameters_5","title":"Parameters","text":"<ul> <li><code>library_id</code> (int): ID of library to delete</li> </ul>"},{"location":"resources/libraries/#delete_version","title":"delete_version()","text":"<p>Delete a specific version of a library.</p> <pre><code>client.libraries.delete_version(123, \"1.0.0\")\n</code></pre>"},{"location":"resources/libraries/#parameters_6","title":"Parameters","text":"<ul> <li><code>library_id</code> (int): ID of the library</li> <li><code>version</code> (str): Version string to delete</li> </ul>"},{"location":"resources/libraries/#get_versions","title":"get_versions()","text":"<p>Get all versions of a specific library.</p> <pre><code>versions = client.libraries.get_versions(\"MyLibrary\")\n</code></pre>"},{"location":"resources/libraries/#parameters_7","title":"Parameters","text":"<ul> <li><code>title</code> (str): The library title to get versions for</li> </ul>"},{"location":"resources/libraries/#returns_5","title":"Returns","text":"<p>List[Dict]: List of library versions</p>"},{"location":"resources/libraries/#get_dependencies","title":"get_dependencies()","text":"<p>Get dependencies for a specific library.</p> <pre><code>dependencies = client.libraries.get_dependencies(123)\n</code></pre>"},{"location":"resources/libraries/#parameters_8","title":"Parameters","text":"<ul> <li><code>library_id</code> (int): ID of the library</li> </ul>"},{"location":"resources/libraries/#returns_6","title":"Returns","text":"<p>List[Dict]: Library dependencies</p>"},{"location":"resources/libraries/#examples","title":"Examples","text":""},{"location":"resources/libraries/#library-management","title":"Library Management","text":"<pre><code># Upload new library version\nlibrary = client.libraries.upload(\"MyLibrary.1.0.0.nupkg\")\n\n# Check dependencies\ndependencies = client.libraries.get_dependencies(library[\"Id\"])\n\n# Get all versions\nversions = client.libraries.get_versions(library[\"Title\"])\n\n# Clean up old versions\nfor version in versions:\n    if version[\"Version\"].startswith(\"0.\"):\n        client.libraries.delete_version(\n            version[\"Id\"],\n            version[\"Version\"]\n        )\n</code></pre>"},{"location":"resources/libraries/#library-deployment","title":"Library Deployment","text":"<pre><code>def deploy_library(file_path: str):\n    # Upload library\n    library = client.libraries.upload(file_path)\n\n    # Verify dependencies\n    dependencies = client.libraries.get_dependencies(library[\"Id\"])\n\n    # Check if all dependencies are available\n    for dep in dependencies:\n        try:\n            versions = client.libraries.get_versions(dep[\"Title\"])\n            if not any(v[\"Version\"] == dep[\"Version\"] for v in versions):\n                print(f\"Missing dependency: {dep['Title']} {dep['Version']}\")\n        except Exception as e:\n            print(f\"Error checking dependency {dep['Title']}: {e}\")\n\n    return library\n\n# Deploy library\nnew_library = deploy_library(\"MyLibrary.1.0.0.nupkg\")\n</code></pre>"},{"location":"resources/libraries/#version-management","title":"Version Management","text":"<pre><code>def manage_library_versions(title: str, keep_versions: int = 3):\n    # Get all versions\n    versions = client.libraries.get_versions(title)\n    versions.sort(key=lambda x: x[\"Version\"], reverse=True)\n\n    # Keep latest versions\n    versions_to_delete = versions[keep_versions:]\n\n    for version in versions_to_delete:\n        # Download for archival\n        content = client.libraries.download(version[\"Id\"])\n        archive_path = f\"archive/{title}_{version['Version']}.nupkg\"\n\n        # Save to archive\n        os.makedirs(os.path.dirname(archive_path), exist_ok=True)\n        with open(archive_path, \"wb\") as f:\n            f.write(content)\n\n        # Delete from Orchestrator\n        client.libraries.delete_version(version[\"Id\"], version[\"Version\"])\n\n# Manage versions\nmanage_library_versions(\"MyLibrary\", keep_versions=3)\n</code></pre>"},{"location":"resources/libraries/#bulk-operations","title":"Bulk Operations","text":"<pre><code>def upload_directory(directory: str):\n    \"\"\"Upload all .nupkg files in a directory\"\"\"\n    results = []\n\n    for file in os.listdir(directory):\n        if file.endswith(\".nupkg\"):\n            try:\n                library = client.libraries.upload(\n                    os.path.join(directory, file)\n                )\n                results.append({\n                    \"file\": file,\n                    \"status\": \"success\",\n                    \"library\": library\n                })\n            except Exception as e:\n                results.append({\n                    \"file\": file,\n                    \"status\": \"error\",\n                    \"error\": str(e)\n                })\n\n    return results\n\n# Upload all libraries in directory\nresults = upload_directory(\"./libraries\")\n</code></pre>"},{"location":"resources/libraries/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to upload invalid package\n    client.libraries.upload(\"invalid.nupkg\")\nexcept HTTPError as e:\n    if e.response.status_code == 400:\n        print(\"Invalid package format\")\n    elif e.response.status_code == 409:\n        print(\"Package version conflict\")\n    else:\n        print(f\"Error uploading package: {e}\")\n</code></pre>"},{"location":"resources/libraries/#best-practices","title":"Best Practices","text":"<ol> <li>Use semantic versioning for libraries</li> <li>Document library dependencies</li> <li>Test libraries before deployment</li> <li>Archive old versions before deletion</li> <li>Maintain changelog for versions</li> <li>Use consistent naming conventions</li> <li>Keep dependencies up to date</li> <li>Regular cleanup of unused versions</li> <li>Document library usage and examples</li> </ol>"},{"location":"resources/libraries/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control access to library management</li> <li>Validate package sources</li> <li>Scan libraries for security issues</li> <li>Monitor library usage</li> <li>Audit library changes</li> <li>Secure library storage</li> <li>Review dependencies regularly</li> </ol>"},{"location":"resources/libraries/#see-also","title":"See Also","text":"<ul> <li>UiPath Libraries Documentation</li> <li>Package Management</li> <li>Library Security</li> <li>Processes for using libraries</li> <li>Packages for package management </li> </ul>"},{"location":"resources/licensing/","title":"Licensing","text":"<p>The Licensing resource allows you to manage UiPath licenses, including viewing license information, managing license assignments, and monitoring license usage.</p>"},{"location":"resources/licensing/#related-resources","title":"Related Resources","text":"<ul> <li>Robots - Robots requiring licenses</li> <li>Machines - Machines using licenses</li> <li>Status - System license status</li> </ul>"},{"location":"resources/licensing/#methods","title":"Methods","text":""},{"location":"resources/licensing/#get_license_info","title":"get_license_info()","text":"<p>Get detailed information about the current license.</p> <pre><code>info = client.licensing.get_license_info()\n</code></pre>"},{"location":"resources/licensing/#returns","title":"Returns","text":"<p>Dict: License information including: - License type - Expiration date - Total available licenses - Used licenses - Features enabled</p>"},{"location":"resources/licensing/#get_license_status","title":"get_license_status()","text":"<p>Get the current status of license usage.</p> <pre><code>status = client.licensing.get_license_status()\n</code></pre>"},{"location":"resources/licensing/#returns_1","title":"Returns","text":"<p>Dict: License status including: - Active licenses - Available licenses - Usage statistics - Compliance status</p>"},{"location":"resources/licensing/#assign_license","title":"assign_license()","text":"<p>Assign a license to a robot or machine.</p> <pre><code>client.licensing.assign_license(\n    target_id=123,\n    target_type=\"Robot\",\n    license_type=\"Unattended\"\n)\n</code></pre>"},{"location":"resources/licensing/#parameters","title":"Parameters","text":"<ul> <li><code>target_id</code> (int): ID of robot or machine</li> <li><code>target_type</code> (str): Type of target (\"Robot\" or \"Machine\")</li> <li><code>license_type</code> (str): Type of license to assign</li> </ul>"},{"location":"resources/licensing/#revoke_license","title":"revoke_license()","text":"<p>Revoke a license from a robot or machine.</p> <pre><code>client.licensing.revoke_license(\n    target_id=123,\n    target_type=\"Robot\"\n)\n</code></pre>"},{"location":"resources/licensing/#parameters_1","title":"Parameters","text":"<ul> <li><code>target_id</code> (int): ID of robot or machine</li> <li><code>target_type</code> (str): Type of target (\"Robot\" or \"Machine\")</li> </ul>"},{"location":"resources/licensing/#examples","title":"Examples","text":""},{"location":"resources/licensing/#license-management","title":"License Management","text":"<pre><code>def manage_licenses():\n    \"\"\"Manage and monitor license usage\"\"\"\n    # Get current license status\n    status = client.licensing.get_license_status()\n\n    # Calculate usage percentage\n    usage_percent = (\n        status[\"UsedLicenses\"] / status[\"TotalLicenses\"] * 100\n    )\n\n    # Check if we need more licenses\n    if usage_percent &gt; 90:\n        print(f\"Warning: License usage at {usage_percent}%\")\n\n    # Get detailed info\n    info = client.licensing.get_license_info()\n\n    return {\n        \"usage_percent\": usage_percent,\n        \"expires_on\": info[\"ExpirationDate\"],\n        \"features\": info[\"Features\"],\n        \"compliance\": info[\"IsCompliant\"]\n    }\n\n# Check license status\nlicense_status = manage_licenses()\n</code></pre>"},{"location":"resources/licensing/#license-assignment","title":"License Assignment","text":"<pre><code>def assign_robot_licenses(robots: List[Dict]):\n    \"\"\"Assign licenses to robots\"\"\"\n    results = []\n\n    for robot in robots:\n        try:\n            # Assign appropriate license type\n            client.licensing.assign_license(\n                target_id=robot[\"Id\"],\n                target_type=\"Robot\",\n                license_type=robot[\"LicenseType\"]\n            )\n\n            results.append({\n                \"robot_id\": robot[\"Id\"],\n                \"status\": \"assigned\",\n                \"license_type\": robot[\"LicenseType\"]\n            })\n\n        except Exception as e:\n            results.append({\n                \"robot_id\": robot[\"Id\"],\n                \"status\": \"error\",\n                \"error\": str(e)\n            })\n\n    return results\n\n# Assign licenses\nrobots = [\n    {\"Id\": 123, \"LicenseType\": \"Attended\"},\n    {\"Id\": 456, \"LicenseType\": \"Unattended\"}\n]\nresults = assign_robot_licenses(robots)\n</code></pre>"},{"location":"resources/licensing/#license-optimization","title":"License Optimization","text":"<pre><code>def optimize_license_usage():\n    \"\"\"Optimize license usage by reviewing assignments\"\"\"\n    # Get all robots\n    robots = client.robots.get()\n    inactive_period = timedelta(days=30)\n\n    optimizations = []\n    for robot in robots:\n        # Check last activity\n        if robot.get(\"LicenseKey\"):\n            last_seen = datetime.fromisoformat(robot[\"LastSeen\"])\n            if datetime.now() - last_seen &gt; inactive_period:\n                try:\n                    # Revoke license from inactive robot\n                    client.licensing.revoke_license(\n                        target_id=robot[\"Id\"],\n                        target_type=\"Robot\"\n                    )\n\n                    optimizations.append({\n                        \"robot_id\": robot[\"Id\"],\n                        \"action\": \"revoked\",\n                        \"reason\": \"inactive\",\n                        \"inactive_days\": (datetime.now() - last_seen).days\n                    })\n\n                except Exception as e:\n                    print(f\"Error optimizing robot {robot['Id']}: {e}\")\n\n    return optimizations\n\n# Optimize licenses\noptimizations = optimize_license_usage()\n</code></pre>"},{"location":"resources/licensing/#license-monitoring","title":"License Monitoring","text":"<pre><code>def monitor_license_compliance():\n    \"\"\"Monitor license compliance and usage\"\"\"\n    info = client.licensing.get_license_info()\n    status = client.licensing.get_license_status()\n\n    alerts = []\n\n    # Check expiration\n    if info[\"ExpirationDate\"]:\n        expiration = datetime.fromisoformat(info[\"ExpirationDate\"])\n        days_remaining = (expiration - datetime.now()).days\n\n        if days_remaining &lt; 30:\n            alerts.append({\n                \"type\": \"expiration\",\n                \"message\": f\"License expires in {days_remaining} days\",\n                \"severity\": \"high\"\n            })\n\n    # Check usage\n    if status[\"UsedLicenses\"] &gt; status[\"TotalLicenses\"]:\n        alerts.append({\n            \"type\": \"overuse\",\n            \"message\": \"More licenses used than available\",\n            \"severity\": \"critical\"\n        })\n\n    # Check compliance\n    if not info[\"IsCompliant\"]:\n        alerts.append({\n            \"type\": \"compliance\",\n            \"message\": \"License compliance issue detected\",\n            \"severity\": \"critical\"\n        })\n\n    return alerts\n\n# Monitor compliance\nalerts = monitor_license_compliance()\n</code></pre>"},{"location":"resources/licensing/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to assign license\n    client.licensing.assign_license(\n        target_id=123,\n        target_type=\"Robot\",\n        license_type=\"Unattended\"\n    )\nexcept HTTPError as e:\n    if e.response.status_code == 409:\n        print(\"No licenses available\")\n    elif e.response.status_code == 400:\n        print(\"Invalid license assignment\")\n    else:\n        print(f\"Error managing license: {e}\")\n</code></pre>"},{"location":"resources/licensing/#best-practices","title":"Best Practices","text":"<ol> <li>Regular license audits</li> <li>Monitor usage trends</li> <li>Plan for renewals</li> <li>Document assignments</li> <li>Regular optimization</li> <li>Track compliance</li> <li>Maintain buffer capacity</li> <li>Monitor expiration dates</li> <li>Review inactive licenses</li> </ol>"},{"location":"resources/licensing/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control license management access</li> <li>Audit license changes</li> <li>Secure license information</li> <li>Monitor unusual activity</li> <li>Regular compliance checks</li> <li>Document license policies</li> <li>Protect license keys</li> </ol>"},{"location":"resources/licensing/#see-also","title":"See Also","text":"<ul> <li>UiPath Licensing Documentation</li> <li>License Management</li> <li>License Types</li> <li>Robots for robot management</li> <li>Status for system status </li> </ul>"},{"location":"resources/logs/","title":"Logs","text":"<p>The Logs resource allows you to submit log entries to UiPath Orchestrator. This is useful for tracking process execution, debugging, and audit purposes.</p>"},{"location":"resources/logs/#related-resources","title":"Related Resources","text":"<ul> <li>Jobs - Jobs generate logs during execution</li> <li>Robots - Robots generate logs during operation</li> <li>Processes - Processes generate logs during execution</li> </ul>"},{"location":"resources/logs/#methods","title":"Methods","text":""},{"location":"resources/logs/#submit_logs","title":"submit_logs()","text":"<p>Submit multiple log entries to Orchestrator.</p> <pre><code>client.logs.submit_logs([\n    {\n        \"message\": \"Process started\",\n        \"level\": \"Information\",\n        \"timeStamp\": \"2023-01-18T14:46:07.4152893+02:00\",\n        \"windowsIdentity\": \"DESKTOP-1L50L0P\\\\WindowsUser\",\n        \"processName\": \"InvoiceProcessing\",\n        \"fileName\": \"Main.xaml\",\n        \"jobId\": \"8066c309-cef8-4b47-9163-b273fc14cc43\"\n    },\n    {\n        \"message\": \"Invoice processed successfully\",\n        \"level\": \"Information\",\n        \"timeStamp\": \"2023-01-18T14:47:07.4152893+02:00\",\n        \"processName\": \"InvoiceProcessing\"\n    }\n])\n</code></pre>"},{"location":"resources/logs/#parameters","title":"Parameters","text":"<ul> <li><code>logs</code> (List[str]): Collection of log entries. Each entry should include:</li> <li><code>message</code> (str, required): Log message</li> <li><code>level</code> (str, optional): Log level (Information, Warning, Error)</li> <li><code>timeStamp</code> (str, optional): ISO format timestamp</li> <li><code>windowsIdentity</code> (str, optional): Windows identity of the process</li> <li><code>agentSessionId</code> (str, optional): Session ID of the robot</li> <li><code>processName</code> (str, optional): Name of the process</li> <li><code>fileName</code> (str, optional): Name of the file generating the log</li> <li><code>jobId</code> (str, optional): Associated job ID</li> </ul>"},{"location":"resources/logs/#post_log","title":"post_log()","text":"<p>Submit a single log entry (Deprecated).</p> <pre><code>client.logs.post_log({\n    \"message\": \"Process completed\",\n    \"level\": \"Information\",\n    \"timeStamp\": \"2023-01-18T14:46:07.4152893+02:00\",\n    \"processName\": \"InvoiceProcessing\"\n})\n</code></pre>"},{"location":"resources/logs/#parameters_1","title":"Parameters","text":"<ul> <li><code>log_data</code> (Dict): Log entry data (same structure as individual entries in submit_logs)</li> </ul> <p>!!! warning \"Deprecation Notice\"     This method is deprecated. Use <code>submit_logs()</code> instead for better performance and reliability.</p>"},{"location":"resources/logs/#examples","title":"Examples","text":""},{"location":"resources/logs/#basic-logging","title":"Basic Logging","text":"<pre><code># Log process execution steps\nclient.logs.submit_logs([\n    {\n        \"message\": \"Starting invoice processing\",\n        \"level\": \"Information\",\n        \"processName\": \"InvoiceProcessing\",\n        \"timeStamp\": \"2023-01-18T14:46:07.4152893+02:00\"\n    },\n    {\n        \"message\": \"Invoice validated\",\n        \"level\": \"Information\",\n        \"processName\": \"InvoiceProcessing\",\n        \"timeStamp\": \"2023-01-18T14:46:08.4152893+02:00\"\n    }\n])\n</code></pre>"},{"location":"resources/logs/#error-logging","title":"Error Logging","text":"<pre><code>import datetime\nimport traceback\n\ndef log_error(error: Exception, process_name: str):\n    client.logs.submit_logs([{\n        \"message\": str(error),\n        \"level\": \"Error\",\n        \"timeStamp\": datetime.datetime.now().isoformat(),\n        \"processName\": process_name,\n        \"details\": traceback.format_exc()\n    }])\n\ntry:\n    # Process logic here\n    raise ValueError(\"Invalid invoice format\")\nexcept Exception as e:\n    log_error(e, \"InvoiceProcessing\")\n</code></pre>"},{"location":"resources/logs/#structured-logging","title":"Structured Logging","text":"<pre><code>def create_log_entry(\n    message: str,\n    level: str = \"Information\",\n    process_name: str = None,\n    **kwargs\n) -&gt; dict:\n    entry = {\n        \"message\": message,\n        \"level\": level,\n        \"timeStamp\": datetime.datetime.now().isoformat()\n    }\n    if process_name:\n        entry[\"processName\"] = process_name\n    entry.update(kwargs)\n    return entry\n\n# Using the helper function\nlogs = [\n    create_log_entry(\n        \"Process started\",\n        process_name=\"InvoiceProcessing\",\n        jobId=\"123\"\n    ),\n    create_log_entry(\n        \"Processing invoice: INV-001\",\n        process_name=\"InvoiceProcessing\",\n        jobId=\"123\"\n    ),\n    create_log_entry(\n        \"Process completed\",\n        process_name=\"InvoiceProcessing\",\n        jobId=\"123\"\n    )\n]\n\nclient.logs.submit_logs(logs)\n</code></pre>"},{"location":"resources/logs/#batch-logging","title":"Batch Logging","text":"<pre><code>def batch_submit_logs(logs, batch_size=100):\n    \"\"\"Submit logs in batches to avoid large requests\"\"\"\n    for i in range(0, len(logs), batch_size):\n        batch = logs[i:i + batch_size]\n        client.logs.submit_logs(batch)\n\n# Generate some logs\nlogs = [\n    {\n        \"message\": f\"Processing item {i}\",\n        \"level\": \"Information\",\n        \"timeStamp\": datetime.datetime.now().isoformat(),\n        \"processName\": \"BatchProcess\"\n    }\n    for i in range(1000)\n]\n\n# Submit in batches\nbatch_submit_logs(logs)\n</code></pre>"},{"location":"resources/logs/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError, RequestException\n\ndef safe_submit_logs(logs):\n    try:\n        client.logs.submit_logs(logs)\n    except HTTPError as e:\n        if e.response.status_code == 408:\n            print(\"Timeout - too many pending logging requests\")\n        else:\n            print(f\"HTTP error submitting logs: {e}\")\n    except RequestException as e:\n        print(f\"Error submitting logs: {e}\")\n</code></pre>"},{"location":"resources/logs/#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>submit_logs()</code> instead of <code>post_log()</code> for better performance</li> <li>Include relevant context in logs (process name, job ID, etc.)</li> <li>Use appropriate log levels:</li> <li>Information: Normal operation</li> <li>Warning: Potential issues</li> <li>Error: Failures and exceptions</li> <li>Include timestamps for accurate timing information</li> <li>Batch log submissions for better performance</li> <li>Handle log submission failures gracefully</li> <li>Don't include sensitive information in logs</li> </ol>"},{"location":"resources/logs/#see-also","title":"See Also","text":"<ul> <li>UiPath Logging Documentation</li> <li>Logging Best Practices</li> <li>Jobs for job-specific logging </li> </ul>"},{"location":"resources/machines/","title":"Machines","text":"<p>The Machines resource allows you to manage UiPath Orchestrator machines. Machines are the physical or virtual computers where UiPath robots run automation processes.</p>"},{"location":"resources/machines/#related-resources","title":"Related Resources","text":"<ul> <li>Robots - Robots that run on machines</li> <li>Jobs - Jobs that execute on machines</li> <li>Releases - Releases that run on machines</li> <li>Licensing - Machine licensing information</li> </ul>"},{"location":"resources/machines/#methods","title":"Methods","text":""},{"location":"resources/machines/#get","title":"get()","text":"<p>Get a list of machines with optional filters.</p> <pre><code>machines = client.machines.get(\n    name=\"DESKTOP-123\",        # Filter by machine name\n    type=\"Standard\",          # Filter by machine type\n    is_online=True           # Filter by online status\n)\n</code></pre>"},{"location":"resources/machines/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str, optional): Filter by machine name</li> <li><code>type</code> (str, optional): Filter by machine type (Standard, Template)</li> <li><code>is_online</code> (bool, optional): Filter by online status</li> </ul>"},{"location":"resources/machines/#returns","title":"Returns","text":"<p>List[Dict]: List of machine objects matching the filters</p>"},{"location":"resources/machines/#get_by_id","title":"get_by_id()","text":"<p>Get a specific machine by ID.</p> <pre><code>machine = client.machines.get_by_id(123)\n</code></pre>"},{"location":"resources/machines/#parameters_1","title":"Parameters","text":"<ul> <li><code>machine_id</code> (int): ID of the machine to retrieve</li> </ul>"},{"location":"resources/machines/#returns_1","title":"Returns","text":"<p>Dict: Machine details</p>"},{"location":"resources/machines/#get_by_key","title":"get_by_key()","text":"<p>Get a machine by its license key.</p> <pre><code>machine = client.machines.get_by_key(\"license-key-123\")\n</code></pre>"},{"location":"resources/machines/#parameters_2","title":"Parameters","text":"<ul> <li><code>key</code> (str): Machine license key</li> </ul>"},{"location":"resources/machines/#returns_2","title":"Returns","text":"<p>Dict: Machine details</p>"},{"location":"resources/machines/#create","title":"create()","text":"<p>Create a new machine.</p> <pre><code>machine = client.machines.create({\n    \"Name\": \"DESKTOP-123\",\n    \"Type\": \"Standard\",\n    \"NonProductionSlots\": 2,\n    \"UnattendedSlots\": 3,\n    \"Description\": \"Development machine\"\n})\n</code></pre>"},{"location":"resources/machines/#parameters_3","title":"Parameters","text":"<ul> <li><code>machine_data</code> (Dict): Machine configuration including:</li> <li><code>Name</code> (str, required): Machine name</li> <li><code>Type</code> (str, required): Machine type</li> <li><code>NonProductionSlots</code> (int, optional): Number of non-production slots</li> <li><code>UnattendedSlots</code> (int, optional): Number of unattended slots</li> <li><code>Description</code> (str, optional): Machine description</li> </ul>"},{"location":"resources/machines/#returns_3","title":"Returns","text":"<p>Dict: Created machine details</p>"},{"location":"resources/machines/#update","title":"update()","text":"<p>Update an existing machine.</p> <pre><code>client.machines.update(123, {\n    \"Description\": \"Updated description\",\n    \"NonProductionSlots\": 3\n})\n</code></pre>"},{"location":"resources/machines/#parameters_4","title":"Parameters","text":"<ul> <li><code>machine_id</code> (int): ID of machine to update</li> <li><code>machine_data</code> (Dict): Updated machine data</li> </ul>"},{"location":"resources/machines/#returns_4","title":"Returns","text":"<p>Dict: Updated machine details</p>"},{"location":"resources/machines/#delete","title":"delete()","text":"<p>Delete a machine.</p> <pre><code>client.machines.delete(123)\n</code></pre>"},{"location":"resources/machines/#parameters_5","title":"Parameters","text":"<ul> <li><code>machine_id</code> (int): ID of machine to delete</li> </ul>"},{"location":"resources/machines/#get_license_info","title":"get_license_info()","text":"<p>Get license information for a machine.</p> <pre><code>license_info = client.machines.get_license_info(123)\n</code></pre>"},{"location":"resources/machines/#parameters_6","title":"Parameters","text":"<ul> <li><code>machine_id</code> (int): ID of the machine</li> </ul>"},{"location":"resources/machines/#returns_5","title":"Returns","text":"<p>Dict: Machine license information</p>"},{"location":"resources/machines/#get_machine_settings","title":"get_machine_settings()","text":"<p>Get settings for a specific machine.</p> <pre><code>settings = client.machines.get_machine_settings(123)\n</code></pre>"},{"location":"resources/machines/#parameters_7","title":"Parameters","text":"<ul> <li><code>machine_id</code> (int): ID of the machine</li> </ul>"},{"location":"resources/machines/#returns_6","title":"Returns","text":"<p>Dict: Machine settings</p>"},{"location":"resources/machines/#update_machine_settings","title":"update_machine_settings()","text":"<p>Update settings for a specific machine.</p> <pre><code>client.machines.update_machine_settings(123, {\n    \"TracingLevel\": \"Error\",\n    \"LogLevel\": \"Info\",\n    \"ExecutionConcurrency\": 3\n})\n</code></pre>"},{"location":"resources/machines/#parameters_8","title":"Parameters","text":"<ul> <li><code>machine_id</code> (int): ID of the machine</li> <li><code>settings</code> (Dict): Updated settings</li> </ul>"},{"location":"resources/machines/#get_robots","title":"get_robots()","text":"<p>Get all robots associated with a machine.</p> <pre><code>robots = client.machines.get_robots(123)\n</code></pre>"},{"location":"resources/machines/#parameters_9","title":"Parameters","text":"<ul> <li><code>machine_id</code> (int): ID of the machine</li> </ul>"},{"location":"resources/machines/#returns_7","title":"Returns","text":"<p>List[Dict]: List of robots on the machine</p>"},{"location":"resources/machines/#delete_by_key","title":"delete_by_key()","text":"<p>Delete a machine by its license key.</p> <pre><code>client.machines.delete_by_key(\"license-key-123\")\n</code></pre>"},{"location":"resources/machines/#parameters_10","title":"Parameters","text":"<ul> <li><code>key</code> (str): Machine license key</li> </ul>"},{"location":"resources/machines/#examples","title":"Examples","text":""},{"location":"resources/machines/#machine-provisioning","title":"Machine Provisioning","text":"<pre><code>def provision_machine(name: str, robot_slots: int):\n    # Create machine\n    machine = client.machines.create({\n        \"Name\": name,\n        \"Type\": \"Standard\",\n        \"UnattendedSlots\": robot_slots,\n        \"Description\": f\"Provisioned on {datetime.now()}\"\n    })\n\n    # Configure machine settings\n    client.machines.update_machine_settings(\n        machine[\"Id\"],\n        {\n            \"TracingLevel\": \"Error\",\n            \"LogLevel\": \"Info\",\n            \"ExecutionConcurrency\": robot_slots\n        }\n    )\n\n    return machine\n\n# Provision development machine\ndev_machine = provision_machine(\"DEV-MACHINE-001\", 2)\n</code></pre>"},{"location":"resources/machines/#machine-maintenance","title":"Machine Maintenance","text":"<pre><code>def check_machine_health(machine_id: int):\n    # Get machine details\n    machine = client.machines.get_by_id(machine_id)\n\n    # Check license status\n    license_info = client.machines.get_license_info(machine_id)\n\n    # Get connected robots\n    robots = client.machines.get_robots(machine_id)\n\n    return {\n        \"is_online\": machine.get(\"IsOnline\", False),\n        \"license_valid\": license_info.get(\"IsValid\", False),\n        \"connected_robots\": len(robots),\n        \"last_seen\": machine.get(\"LastModificationTime\")\n    }\n\n# Monitor machine health\nhealth_status = check_machine_health(123)\n</code></pre>"},{"location":"resources/machines/#machine-cleanup","title":"Machine Cleanup","text":"<pre><code>def cleanup_offline_machines(days_threshold: int = 30):\n    from datetime import datetime, timedelta\n    cutoff_date = datetime.now() - timedelta(days=days_threshold)\n\n    # Get all machines\n    machines = client.machines.get()\n\n    for machine in machines:\n        last_seen = datetime.fromisoformat(machine[\"LastModificationTime\"])\n        if not machine[\"IsOnline\"] and last_seen &lt; cutoff_date:\n            # Archive machine data if needed\n            print(f\"Archiving machine {machine['Name']}\")\n\n            # Delete machine\n            client.machines.delete(machine[\"Id\"])\n\n# Clean up inactive machines\ncleanup_offline_machines(30)\n</code></pre>"},{"location":"resources/machines/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to create machine with duplicate name\n    client.machines.create({\n        \"Name\": \"ExistingMachine\",\n        \"Type\": \"Standard\"\n    })\nexcept HTTPError as e:\n    if e.response.status_code == 409:\n        print(\"Machine with this name already exists\")\n    elif e.response.status_code == 400:\n        print(\"Invalid machine configuration\")\n    else:\n        print(f\"Error creating machine: {e}\")\n</code></pre>"},{"location":"resources/machines/#best-practices","title":"Best Practices","text":"<ol> <li>Use consistent naming conventions for machines</li> <li>Monitor machine health regularly</li> <li>Keep machine settings optimized for workload</li> <li>Clean up unused machines</li> <li>Document machine configurations</li> <li>Maintain appropriate robot slot allocations</li> <li>Regular license validation</li> <li>Monitor machine resource usage</li> <li>Keep machines updated</li> </ol>"},{"location":"resources/machines/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control machine access permissions</li> <li>Secure machine credentials</li> <li>Monitor machine activities</li> <li>Regular security updates</li> <li>Network security configuration</li> <li>Audit machine changes</li> <li>License compliance</li> </ol>"},{"location":"resources/machines/#see-also","title":"See Also","text":"<ul> <li>UiPath Machines Documentation</li> <li>Machine Management</li> <li>Machine Security</li> <li>Robots for robot management</li> <li>Licensing for license management </li> </ul>"},{"location":"resources/metrics/","title":"Metrics","text":"<p>The Metrics resource allows you to access performance metrics and operational statistics from UiPath Orchestrator. These metrics help monitor system health, performance, and resource utilization.</p>"},{"location":"resources/metrics/#related-resources","title":"Related Resources","text":"<ul> <li>Stats - Detailed statistical data</li> <li>Status - System status information</li> <li>Jobs - Job performance metrics</li> <li>Robots - Robot performance metrics</li> </ul>"},{"location":"resources/metrics/#methods","title":"Methods","text":""},{"location":"resources/metrics/#get_metrics","title":"get_metrics()","text":"<p>Get system metrics with optional filters.</p> <pre><code>metrics = client.metrics.get_metrics(\n    category=\"Performance\",    # Filter by category\n    from_date=\"2023-01-01\",   # Start date\n    to_date=\"2023-12-31\"      # End date\n)\n</code></pre>"},{"location":"resources/metrics/#parameters","title":"Parameters","text":"<ul> <li><code>category</code> (str, optional): Filter by metric category</li> <li><code>from_date</code> (str, optional): Start date for metrics (ISO format)</li> <li><code>to_date</code> (str, optional): End date for metrics (ISO format)</li> </ul>"},{"location":"resources/metrics/#returns","title":"Returns","text":"<p>Dict: System metrics data</p>"},{"location":"resources/metrics/#get_performance_metrics","title":"get_performance_metrics()","text":"<p>Get performance-specific metrics.</p> <pre><code>performance = client.metrics.get_performance_metrics()\n</code></pre>"},{"location":"resources/metrics/#returns_1","title":"Returns","text":"<p>Dict: Performance metrics including: - Response times - Resource utilization - Throughput statistics - Error rates</p>"},{"location":"resources/metrics/#get_resource_metrics","title":"get_resource_metrics()","text":"<p>Get resource utilization metrics.</p> <pre><code>resources = client.metrics.get_resource_metrics()\n</code></pre>"},{"location":"resources/metrics/#returns_2","title":"Returns","text":"<p>Dict: Resource metrics including: - CPU usage - Memory utilization - Storage usage - Network statistics</p>"},{"location":"resources/metrics/#examples","title":"Examples","text":""},{"location":"resources/metrics/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>def monitor_system_performance(threshold_minutes: int = 5):\n    \"\"\"Monitor system performance metrics\"\"\"\n    metrics = client.metrics.get_performance_metrics()\n\n    alerts = []\n\n    # Check response times\n    if metrics[\"AverageResponseTime\"] &gt; threshold_minutes * 60:\n        alerts.append({\n            \"metric\": \"response_time\",\n            \"value\": metrics[\"AverageResponseTime\"],\n            \"threshold\": threshold_minutes * 60,\n            \"severity\": \"high\"\n        })\n\n    # Check error rates\n    if metrics[\"ErrorRate\"] &gt; 0.05:  # 5% threshold\n        alerts.append({\n            \"metric\": \"error_rate\",\n            \"value\": metrics[\"ErrorRate\"],\n            \"threshold\": 0.05,\n            \"severity\": \"high\"\n        })\n\n    # Check throughput\n    if metrics[\"RequestsPerMinute\"] &lt; 10:\n        alerts.append({\n            \"metric\": \"throughput\",\n            \"value\": metrics[\"RequestsPerMinute\"],\n            \"threshold\": 10,\n            \"severity\": \"medium\"\n        })\n\n    return {\n        \"metrics\": metrics,\n        \"alerts\": alerts,\n        \"timestamp\": datetime.now().isoformat()\n    }\n\n# Monitor performance\nperformance_status = monitor_system_performance()\n</code></pre>"},{"location":"resources/metrics/#resource-utilization","title":"Resource Utilization","text":"<pre><code>def analyze_resource_usage():\n    \"\"\"Analyze resource utilization patterns\"\"\"\n    metrics = client.metrics.get_resource_metrics()\n\n    analysis = {\n        \"cpu\": {\n            \"current\": metrics[\"CpuUsage\"],\n            \"peak\": metrics[\"PeakCpuUsage\"],\n            \"average\": metrics[\"AverageCpuUsage\"]\n        },\n        \"memory\": {\n            \"current\": metrics[\"MemoryUsage\"],\n            \"available\": metrics[\"AvailableMemory\"],\n            \"total\": metrics[\"TotalMemory\"]\n        },\n        \"storage\": {\n            \"used\": metrics[\"StorageUsed\"],\n            \"available\": metrics[\"StorageAvailable\"],\n            \"critical_paths\": []\n        }\n    }\n\n    # Check for storage hotspots\n    for path, usage in metrics[\"StorageByPath\"].items():\n        if usage[\"UsedPercentage\"] &gt; 85:\n            analysis[\"storage\"][\"critical_paths\"].append({\n                \"path\": path,\n                \"usage_percent\": usage[\"UsedPercentage\"]\n            })\n\n    return analysis\n\n# Analyze resources\nresource_analysis = analyze_resource_usage()\n</code></pre>"},{"location":"resources/metrics/#metric-trending","title":"Metric Trending","text":"<pre><code>def analyze_metric_trends(days: int = 30):\n    \"\"\"Analyze metric trends over time\"\"\"\n    from datetime import datetime, timedelta\n\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days)\n\n    metrics = client.metrics.get_metrics(\n        from_date=start_date.isoformat(),\n        to_date=end_date.isoformat()\n    )\n\n    trends = {\n        \"performance\": {\n            \"response_time\": [],\n            \"error_rate\": [],\n            \"throughput\": []\n        },\n        \"resources\": {\n            \"cpu_usage\": [],\n            \"memory_usage\": [],\n            \"storage_usage\": []\n        }\n    }\n\n    # Analyze daily patterns\n    for day_metrics in metrics[\"DailyMetrics\"]:\n        date = day_metrics[\"Date\"]\n\n        # Performance trends\n        trends[\"performance\"][\"response_time\"].append({\n            \"date\": date,\n            \"value\": day_metrics[\"AverageResponseTime\"]\n        })\n\n        trends[\"performance\"][\"error_rate\"].append({\n            \"date\": date,\n            \"value\": day_metrics[\"ErrorRate\"]\n        })\n\n        # Resource trends\n        trends[\"resources\"][\"cpu_usage\"].append({\n            \"date\": date,\n            \"value\": day_metrics[\"AverageCpuUsage\"]\n        })\n\n    return trends\n\n# Analyze trends\nmetric_trends = analyze_metric_trends()\n</code></pre>"},{"location":"resources/metrics/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to get metrics with invalid date range\n    metrics = client.metrics.get_metrics(\n        from_date=\"invalid-date\"\n    )\nexcept HTTPError as e:\n    if e.response.status_code == 400:\n        print(\"Invalid date format\")\n    elif e.response.status_code == 403:\n        print(\"Insufficient permissions to access metrics\")\n    else:\n        print(f\"Error retrieving metrics: {e}\")\n</code></pre>"},{"location":"resources/metrics/#best-practices","title":"Best Practices","text":"<ol> <li>Regular metric collection</li> <li>Set appropriate thresholds</li> <li>Monitor trends over time</li> <li>Document baseline metrics</li> <li>Alert on anomalies</li> <li>Retain historical data</li> <li>Regular metric review</li> <li>Correlate with events</li> <li>Validate metric accuracy</li> </ol>"},{"location":"resources/metrics/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control metric access</li> <li>Secure metric data</li> <li>Audit metric access</li> <li>Validate data sources</li> <li>Monitor suspicious patterns</li> <li>Protect sensitive metrics</li> <li>Regular security review</li> </ol>"},{"location":"resources/metrics/#see-also","title":"See Also","text":"<ul> <li>UiPath Monitoring Documentation</li> <li>Performance Monitoring</li> <li>Resource Management</li> <li>Stats for detailed statistics</li> <li>Status for system status </li> </ul>"},{"location":"resources/packages/","title":"Packages","text":"<p>The Packages resource allows you to manage UiPath process packages (.nupkg files) in Orchestrator. Packages contain the automation projects that can be deployed and executed by robots.</p>"},{"location":"resources/packages/#related-resources","title":"Related Resources","text":"<ul> <li>Processes - Processes using packages</li> <li>Releases - Releases created from packages</li> <li>Libraries - Library packages</li> <li>Jobs - Jobs executing packaged processes</li> </ul>"},{"location":"resources/packages/#methods","title":"Methods","text":""},{"location":"resources/packages/#get","title":"get()","text":"<p>Get a list of packages with optional filters.</p> <pre><code>packages = client.packages.get(\n    is_active=True,           # Filter by active status\n    is_latest=True,          # Filter for latest versions\n    package_key=\"MyPackage\"  # Filter by package key\n)\n</code></pre>"},{"location":"resources/packages/#parameters","title":"Parameters","text":"<ul> <li><code>is_active</code> (bool, optional): Filter by active status</li> <li><code>is_latest</code> (bool, optional): Filter for latest versions only</li> <li><code>package_key</code> (str, optional): Filter by package key</li> </ul>"},{"location":"resources/packages/#returns","title":"Returns","text":"<p>List[Dict]: List of package objects matching the filters</p>"},{"location":"resources/packages/#get_by_id","title":"get_by_id()","text":"<p>Get a specific package by ID.</p> <pre><code>package = client.packages.get_by_id(123)\n</code></pre>"},{"location":"resources/packages/#parameters_1","title":"Parameters","text":"<ul> <li><code>package_id</code> (int): ID of the package to retrieve</li> </ul>"},{"location":"resources/packages/#returns_1","title":"Returns","text":"<p>Dict: Package details</p>"},{"location":"resources/packages/#get_by_key","title":"get_by_key()","text":"<p>Get a package by its key.</p> <pre><code>package = client.packages.get_by_key(\"package-key-123\")\n</code></pre>"},{"location":"resources/packages/#parameters_2","title":"Parameters","text":"<ul> <li><code>key</code> (str): Package key</li> </ul>"},{"location":"resources/packages/#returns_2","title":"Returns","text":"<p>Dict: Package details</p>"},{"location":"resources/packages/#upload","title":"upload()","text":"<p>Upload a new package (.nupkg file).</p> <pre><code>package = client.packages.upload(\n    file_path=\"MyProcess.1.0.0.nupkg\",\n    version=\"1.0.0\"  # Optional\n)\n</code></pre>"},{"location":"resources/packages/#parameters_3","title":"Parameters","text":"<ul> <li><code>file_path</code> (str): Path to the .nupkg file</li> <li><code>version</code> (str, optional): Version string</li> </ul>"},{"location":"resources/packages/#returns_3","title":"Returns","text":"<p>Dict: Uploaded package details</p>"},{"location":"resources/packages/#upload_stream","title":"upload_stream()","text":"<p>Upload a package from a file stream.</p> <pre><code>with open(\"MyProcess.nupkg\", \"rb\") as f:\n    package = client.packages.upload_stream(\n        file_stream=f,\n        filename=\"MyProcess.nupkg\"\n    )\n</code></pre>"},{"location":"resources/packages/#parameters_4","title":"Parameters","text":"<ul> <li><code>file_stream</code> (BinaryIO): File-like object containing the package</li> <li><code>filename</code> (str): Name of the file</li> </ul>"},{"location":"resources/packages/#returns_4","title":"Returns","text":"<p>Dict: Uploaded package details</p>"},{"location":"resources/packages/#download","title":"download()","text":"<p>Download a package.</p> <pre><code>content = client.packages.download(123)\nwith open(\"MyProcess.nupkg\", \"wb\") as f:\n    f.write(content)\n</code></pre>"},{"location":"resources/packages/#parameters_5","title":"Parameters","text":"<ul> <li><code>package_id</code> (int): ID of the package to download</li> </ul>"},{"location":"resources/packages/#returns_5","title":"Returns","text":"<p>bytes: The package content</p>"},{"location":"resources/packages/#delete","title":"delete()","text":"<p>Delete a package.</p> <pre><code>client.packages.delete(123)\n</code></pre>"},{"location":"resources/packages/#parameters_6","title":"Parameters","text":"<ul> <li><code>package_id</code> (int): ID of package to delete</li> </ul>"},{"location":"resources/packages/#set_active","title":"set_active()","text":"<p>Set the active status of a package.</p> <pre><code>client.packages.set_active(123, True)\n</code></pre>"},{"location":"resources/packages/#parameters_7","title":"Parameters","text":"<ul> <li><code>package_id</code> (int): ID of the package</li> <li><code>is_active</code> (bool): Whether the package should be active</li> </ul>"},{"location":"resources/packages/#examples","title":"Examples","text":""},{"location":"resources/packages/#package-management","title":"Package Management","text":"<pre><code>def manage_package_versions(package_key: str, keep_versions: int = 3):\n    \"\"\"Manage package versions, keeping only the most recent ones\"\"\"\n    # Get all versions\n    packages = client.packages.get(package_key=package_key)\n\n    # Sort by version\n    packages.sort(key=lambda x: x[\"Version\"], reverse=True)\n\n    # Keep latest versions\n    to_delete = packages[keep_versions:]\n\n    results = {\n        \"kept\": [p[\"Version\"] for p in packages[:keep_versions]],\n        \"deleted\": []\n    }\n\n    # Delete old versions\n    for package in to_delete:\n        try:\n            # Download for archival\n            content = client.packages.download(package[\"Id\"])\n            archive_path = f\"archive/{package_key}_{package['Version']}.nupkg\"\n\n            with open(archive_path, \"wb\") as f:\n                f.write(content)\n\n            # Delete from Orchestrator\n            client.packages.delete(package[\"Id\"])\n\n            results[\"deleted\"].append({\n                \"version\": package[\"Version\"],\n                \"archived\": True\n            })\n\n        except Exception as e:\n            results[\"deleted\"].append({\n                \"version\": package[\"Version\"],\n                \"error\": str(e)\n            })\n\n    return results\n\n# Manage package versions\nresults = manage_package_versions(\"MyProcess\", keep_versions=3)\n</code></pre>"},{"location":"resources/packages/#package-deployment","title":"Package Deployment","text":"<pre><code>def deploy_package(file_path: str, environment_id: int):\n    \"\"\"Deploy a package to a specific environment\"\"\"\n    try:\n        # Upload package\n        package = client.packages.upload(file_path)\n\n        # Create release\n        release = client.releases.create({\n            \"Name\": f\"Release_{package['Version']}\",\n            \"ProcessKey\": package[\"Key\"],\n            \"ProcessVersion\": package[\"Version\"],\n            \"EnvironmentId\": environment_id\n        })\n\n        return {\n            \"package\": package,\n            \"release\": release,\n            \"status\": \"deployed\"\n        }\n\n    except Exception as e:\n        return {\n            \"status\": \"error\",\n            \"error\": str(e)\n        }\n\n# Deploy package\nresult = deploy_package(\n    \"MyProcess.1.0.0.nupkg\",\n    environment_id=123\n)\n</code></pre>"},{"location":"resources/packages/#package-validation","title":"Package Validation","text":"<pre><code>def validate_package(file_path: str):\n    \"\"\"Validate package before deployment\"\"\"\n    import zipfile\n    import json\n\n    validations = {\n        \"file_exists\": False,\n        \"valid_nupkg\": False,\n        \"has_project_json\": False,\n        \"has_main_xaml\": False\n    }\n\n    try:\n        # Check file exists\n        validations[\"file_exists\"] = os.path.exists(file_path)\n\n        # Check valid nupkg\n        with zipfile.ZipFile(file_path) as z:\n            # Check project.json\n            if \"project.json\" in z.namelist():\n                validations[\"has_project_json\"] = True\n\n                # Parse project.json\n                with z.open(\"project.json\") as f:\n                    project = json.load(f)\n                    main_file = project.get(\"main\", \"Main.xaml\")\n\n                    # Check main workflow exists\n                    validations[\"has_main_xaml\"] = main_file in z.namelist()\n\n            validations[\"valid_nupkg\"] = True\n\n    except zipfile.BadZipFile:\n        validations[\"valid_nupkg\"] = False\n    except Exception as e:\n        validations[\"error\"] = str(e)\n\n    return validations\n\n# Validate package\nvalidation_results = validate_package(\"MyProcess.nupkg\")\n</code></pre>"},{"location":"resources/packages/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to upload invalid package\n    client.packages.upload(\"invalid.nupkg\")\nexcept HTTPError as e:\n    if e.response.status_code == 400:\n        print(\"Invalid package format\")\n    elif e.response.status_code == 409:\n        print(\"Package version conflict\")\n    else:\n        print(f\"Error uploading package: {e}\")\n</code></pre>"},{"location":"resources/packages/#best-practices","title":"Best Practices","text":"<ol> <li>Use semantic versioning</li> <li>Validate packages before upload</li> <li>Archive old versions</li> <li>Document package contents</li> <li>Test in development first</li> <li>Maintain version history</li> <li>Regular cleanup of old versions</li> <li>Monitor package usage</li> <li>Secure package storage</li> </ol>"},{"location":"resources/packages/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control package access</li> <li>Validate package sources</li> <li>Scan for security issues</li> <li>Monitor package usage</li> <li>Secure package storage</li> <li>Audit package changes</li> <li>Version control integration</li> </ol>"},{"location":"resources/packages/#see-also","title":"See Also","text":"<ul> <li>UiPath Packages Documentation</li> <li>Package Management</li> <li>Package Security</li> <li>Processes for process management</li> <li>Releases for release management </li> </ul>"},{"location":"resources/processes/","title":"Processes","text":"<p>The Processes resource allows you to manage UiPath automation processes (packages) in Orchestrator. Processes are the automation projects that can be executed by robots.</p>"},{"location":"resources/processes/#related-resources","title":"Related Resources","text":"<ul> <li>Releases - Process versions that can be deployed</li> <li>Jobs - Process executions</li> <li>Robots - Robots that execute processes</li> <li>Packages - Process package files</li> <li>Assets - Configuration used by processes</li> </ul>"},{"location":"resources/processes/#methods","title":"Methods","text":""},{"location":"resources/processes/#get","title":"get()","text":"<p>Get a list of processes with optional filters.</p> <pre><code>processes = client.processes.get(\n    is_active=True,           # Filter by active status\n    is_latest=True,          # Filter for latest versions\n    package_key=\"MyProcess\"  # Filter by package key\n)\n</code></pre>"},{"location":"resources/processes/#parameters","title":"Parameters","text":"<ul> <li><code>is_active</code> (bool, optional): Filter by active status</li> <li><code>is_latest</code> (bool, optional): Filter for latest versions only</li> <li><code>package_key</code> (str, optional): Filter by package key</li> </ul>"},{"location":"resources/processes/#returns","title":"Returns","text":"<p>List[Dict]: List of process objects matching the filters</p>"},{"location":"resources/processes/#get_by_id","title":"get_by_id()","text":"<p>Get a specific process by ID.</p> <pre><code>process = client.processes.get_by_id(123)\n</code></pre>"},{"location":"resources/processes/#parameters_1","title":"Parameters","text":"<ul> <li><code>process_id</code> (int): ID of the process to retrieve</li> </ul>"},{"location":"resources/processes/#returns_1","title":"Returns","text":"<p>Dict: Process details</p>"},{"location":"resources/processes/#get_by_key","title":"get_by_key()","text":"<p>Get a process by its package key.</p> <pre><code>process = client.processes.get_by_key(\"MyProcess\")\n</code></pre>"},{"location":"resources/processes/#parameters_2","title":"Parameters","text":"<ul> <li><code>key</code> (str): Package key of the process</li> </ul>"},{"location":"resources/processes/#returns_2","title":"Returns","text":"<p>Dict: Process details</p>"},{"location":"resources/processes/#upload","title":"upload()","text":"<p>Upload a new process package (.nupkg file).</p> <pre><code>process = client.processes.upload(\n    file_path=\"MyProcess.1.0.0.nupkg\",\n    version=\"1.0.0\"  # Optional\n)\n</code></pre>"},{"location":"resources/processes/#parameters_3","title":"Parameters","text":"<ul> <li><code>file_path</code> (str): Path to the .nupkg file</li> <li><code>version</code> (str, optional): Version string for the package</li> </ul>"},{"location":"resources/processes/#returns_3","title":"Returns","text":"<p>Dict: Uploaded process details</p>"},{"location":"resources/processes/#upload_stream","title":"upload_stream()","text":"<p>Upload a process package from a file stream.</p> <pre><code>with open(\"MyProcess.nupkg\", \"rb\") as f:\n    process = client.processes.upload_stream(\n        file_stream=f,\n        filename=\"MyProcess.nupkg\",\n        version=\"1.0.0\"\n    )\n</code></pre>"},{"location":"resources/processes/#parameters_4","title":"Parameters","text":"<ul> <li><code>file_stream</code> (BinaryIO): File-like object containing the package</li> <li><code>filename</code> (str): Name of the file</li> <li><code>version</code> (str, optional): Version string for the package</li> </ul>"},{"location":"resources/processes/#returns_4","title":"Returns","text":"<p>Dict: Uploaded process details</p>"},{"location":"resources/processes/#download","title":"download()","text":"<p>Download a process package.</p> <pre><code>package_content = client.processes.download(123)\nwith open(\"MyProcess.nupkg\", \"wb\") as f:\n    f.write(package_content)\n</code></pre>"},{"location":"resources/processes/#parameters_5","title":"Parameters","text":"<ul> <li><code>process_id</code> (int): ID of the process to download</li> </ul>"},{"location":"resources/processes/#returns_5","title":"Returns","text":"<p>bytes: The process package content</p>"},{"location":"resources/processes/#delete","title":"delete()","text":"<p>Delete a process.</p> <pre><code>client.processes.delete(123)\n</code></pre>"},{"location":"resources/processes/#parameters_6","title":"Parameters","text":"<ul> <li><code>process_id</code> (int): ID of the process to delete</li> </ul>"},{"location":"resources/processes/#set_active","title":"set_active()","text":"<p>Set the active status of a process.</p> <pre><code>client.processes.set_active(123, True)\n</code></pre>"},{"location":"resources/processes/#parameters_7","title":"Parameters","text":"<ul> <li><code>process_id</code> (int): ID of the process</li> <li><code>is_active</code> (bool): Whether the process should be active</li> </ul>"},{"location":"resources/processes/#examples","title":"Examples","text":""},{"location":"resources/processes/#managing-process-lifecycle","title":"Managing Process Lifecycle","text":"<pre><code># Upload new process\nprocess = client.processes.upload(\"MyProcess.1.0.0.nupkg\")\n\n# Create a release for the process\nrelease = client.releases.create({\n    \"Name\": \"MyProcess Release\",\n    \"ProcessKey\": process[\"Key\"],\n    \"ProcessVersion\": process[\"Version\"],\n    \"Description\": \"Initial release\"\n})\n\n# Start a job using the process\njob = client.jobs.start_jobs(\n    release_key=release[\"Key\"],\n    robot_ids=[123],\n    input_arguments={\n        \"InputParam\": \"value\"\n    }\n)\n</code></pre>"},{"location":"resources/processes/#version-management","title":"Version Management","text":"<pre><code># Get all versions of a process\nversions = client.processes.get(package_key=\"MyProcess\")\n\n# Get only latest version\nlatest = client.processes.get(\n    package_key=\"MyProcess\",\n    is_latest=True\n)[0]\n\n# Upload new version\nnew_version = client.processes.upload(\n    \"MyProcess.2.0.0.nupkg\",\n    version=\"2.0.0\"\n)\n\n# Deactivate old version\nclient.processes.set_active(versions[0][\"Id\"], False)\n</code></pre>"},{"location":"resources/processes/#process-deployment","title":"Process Deployment","text":"<pre><code>import os\nfrom datetime import datetime\n\ndef deploy_process(package_path: str, environment: str):\n    # Upload process\n    process = client.processes.upload(package_path)\n\n    # Create release\n    release = client.releases.create({\n        \"Name\": f\"{process['Key']}_{environment}\",\n        \"ProcessKey\": process[\"Key\"],\n        \"ProcessVersion\": process[\"Version\"],\n        \"Description\": f\"Deployed to {environment} on {datetime.now()}\"\n    })\n\n    # Configure process settings\n    settings = {\n        \"MaxConcurrentJobs\": 5,\n        \"JobPriority\": \"Normal\",\n        \"AutoUpdate\": True\n    }\n    client.releases.update_process_settings(release[\"Id\"], settings)\n\n    return release\n\n# Deploy to different environments\ndev_release = deploy_process(\"MyProcess.nupkg\", \"Development\")\nprod_release = deploy_process(\"MyProcess.nupkg\", \"Production\")\n</code></pre>"},{"location":"resources/processes/#package-management","title":"Package Management","text":"<pre><code>def archive_old_versions(process_key: str, keep_versions: int = 3):\n    # Get all versions\n    versions = client.processes.get(package_key=process_key)\n    versions.sort(key=lambda x: x[\"Version\"], reverse=True)\n\n    # Keep the latest n versions\n    for old_version in versions[keep_versions:]:\n        # Download for archival\n        content = client.processes.download(old_version[\"Id\"])\n        archive_path = f\"archive/{process_key}_{old_version['Version']}.nupkg\"\n        os.makedirs(os.path.dirname(archive_path), exist_ok=True)\n\n        with open(archive_path, \"wb\") as f:\n            f.write(content)\n\n        # Delete from Orchestrator\n        client.processes.delete(old_version[\"Id\"])\n</code></pre>"},{"location":"resources/processes/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to upload invalid package\n    client.processes.upload(\"invalid.nupkg\")\nexcept HTTPError as e:\n    if e.response.status_code == 400:\n        print(\"Invalid package format\")\n    elif e.response.status_code == 409:\n        print(\"Package version conflict\")\n    else:\n        print(f\"Error uploading package: {e}\")\n</code></pre>"},{"location":"resources/processes/#best-practices","title":"Best Practices","text":"<ol> <li>Use semantic versioning for process packages</li> <li>Keep process names consistent across environments</li> <li>Document process dependencies and requirements</li> <li>Test processes in development environment before production</li> <li>Archive old versions before deletion</li> <li>Use meaningful descriptions for process versions</li> <li>Configure appropriate process settings for each environment</li> <li>Monitor process execution statistics</li> <li>Maintain process documentation</li> </ol>"},{"location":"resources/processes/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control access to process uploads</li> <li>Audit process modifications</li> <li>Secure process input arguments</li> <li>Review process dependencies</li> <li>Monitor process execution permissions</li> <li>Validate process packages before deployment</li> </ol>"},{"location":"resources/processes/#see-also","title":"See Also","text":"<ul> <li>UiPath Process Documentation</li> <li>Package Management</li> <li>Process Security</li> <li>Releases for version management</li> <li>Jobs for process execution </li> </ul>"},{"location":"resources/queues/","title":"Queues","text":"<p>The Queues resource allows you to manage UiPath Orchestrator queues and queue items. Queues are used to distribute work items among robots.</p>"},{"location":"resources/queues/#related-resources","title":"Related Resources","text":"<ul> <li>Jobs - Jobs that process queue items</li> <li>Robots - Robots that process queue items</li> <li>Test Data Queue - Similar functionality for test automation</li> </ul>"},{"location":"resources/queues/#methods","title":"Methods","text":""},{"location":"resources/queues/#get","title":"get()","text":"<p>Get a list of queue definitions.</p> <pre><code>queues = client.queues.get(name=\"InvoiceQueue\")\n</code></pre>"},{"location":"resources/queues/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str, optional): Filter by queue name</li> </ul>"},{"location":"resources/queues/#returns","title":"Returns","text":"<p>List[Dict]: List of queue definitions</p>"},{"location":"resources/queues/#get_by_id","title":"get_by_id()","text":"<p>Get a specific queue definition by ID.</p> <pre><code>queue = client.queues.get_by_id(123)\n</code></pre>"},{"location":"resources/queues/#parameters_1","title":"Parameters","text":"<ul> <li><code>queue_id</code> (int): ID of the queue to retrieve</li> </ul>"},{"location":"resources/queues/#returns_1","title":"Returns","text":"<p>Dict: Queue definition details</p>"},{"location":"resources/queues/#create","title":"create()","text":"<p>Create a new queue.</p> <pre><code>queue = client.queues.create({\n    \"Name\": \"InvoiceQueue\",\n    \"Description\": \"Queue for processing invoices\",\n    \"AcceptAutomaticallyRetry\": True,\n    \"MaxNumberOfRetries\": 3\n})\n</code></pre>"},{"location":"resources/queues/#parameters_2","title":"Parameters","text":"<ul> <li><code>queue_data</code> (Dict): Queue configuration including:</li> <li><code>Name</code> (str, required): Queue name</li> <li><code>Description</code> (str, optional): Queue description</li> <li><code>AcceptAutomaticallyRetry</code> (bool, optional): Whether to auto-retry failed items</li> <li><code>MaxNumberOfRetries</code> (int, optional): Maximum retry attempts</li> <li><code>EnforceUniqueReference</code> (bool, optional): Enforce unique references</li> </ul>"},{"location":"resources/queues/#returns_2","title":"Returns","text":"<p>Dict: Created queue details</p>"},{"location":"resources/queues/#add_queue_item","title":"add_queue_item()","text":"<p>Add a single item to a queue.</p> <pre><code>item = client.queues.add_queue_item(\n    queue_name=\"InvoiceQueue\",\n    item_data={\n        \"Priority\": \"High\",\n        \"Reference\": \"INV-001\",\n        \"SpecificContent\": {\n            \"InvoiceNumber\": \"001\",\n            \"Amount\": 100.00\n        }\n    }\n)\n</code></pre>"},{"location":"resources/queues/#parameters_3","title":"Parameters","text":"<ul> <li><code>queue_name</code> (str): Name of the queue</li> <li><code>item_data</code> (Dict): Item data including:</li> <li><code>Priority</code> (str, optional): Item priority (Low, Normal, High)</li> <li><code>Reference</code> (str, optional): Unique reference</li> <li><code>SpecificContent</code> (Dict): Business data for the item</li> <li><code>DeferDate</code> (str, optional): ISO datetime when item becomes available</li> <li><code>DueDate</code> (str, optional): ISO datetime when item is due</li> </ul>"},{"location":"resources/queues/#returns_3","title":"Returns","text":"<p>Dict: Created queue item details</p>"},{"location":"resources/queues/#bulk_add_queue_items","title":"bulk_add_queue_items()","text":"<p>Add multiple items to a queue in one operation.</p> <pre><code>result = client.queues.bulk_add_queue_items(\n    queue_name=\"InvoiceQueue\",\n    items=[\n        {\n            \"Priority\": \"Normal\",\n            \"Reference\": \"INV-001\",\n            \"SpecificContent\": {\"InvoiceNumber\": \"001\"}\n        },\n        {\n            \"Priority\": \"High\",\n            \"Reference\": \"INV-002\",\n            \"SpecificContent\": {\"InvoiceNumber\": \"002\"}\n        }\n    ]\n)\n</code></pre>"},{"location":"resources/queues/#parameters_4","title":"Parameters","text":"<ul> <li><code>queue_name</code> (str): Name of the queue</li> <li><code>items</code> (List[Dict]): List of item data dictionaries</li> </ul>"},{"location":"resources/queues/#returns_4","title":"Returns","text":"<p>Dict: Result including number of items added</p>"},{"location":"resources/queues/#get_queue_items","title":"get_queue_items()","text":"<p>Get items from a queue with optional filters.</p> <pre><code>items = client.queues.get_queue_items(\n    queue_name=\"InvoiceQueue\",\n    status=\"New\"\n)\n</code></pre>"},{"location":"resources/queues/#parameters_5","title":"Parameters","text":"<ul> <li><code>queue_name</code> (str, optional): Filter by queue name</li> <li><code>status</code> (str, optional): Filter by status. Valid values:</li> <li><code>New</code></li> <li><code>InProgress</code></li> <li><code>Failed</code></li> <li><code>Successful</code></li> <li><code>Retried</code></li> <li><code>Abandoned</code></li> </ul>"},{"location":"resources/queues/#returns_5","title":"Returns","text":"<p>List[Dict]: List of queue items matching filters</p>"},{"location":"resources/queues/#set_transaction_status","title":"set_transaction_status()","text":"<p>Update the status of a queue item.</p> <pre><code>client.queues.set_transaction_status(\n    queue_item_id=123,\n    status=\"Successful\",\n    reason=\"Processing completed successfully\"\n)\n</code></pre>"},{"location":"resources/queues/#parameters_6","title":"Parameters","text":"<ul> <li><code>queue_item_id</code> (int): ID of the queue item</li> <li><code>status</code> (str): New status (Success, Failed, Retried)</li> <li>`</li> </ul>"},{"location":"resources/releases/","title":"Releases","text":"<p>The Releases resource allows you to manage UiPath process releases. Releases represent specific versions of processes that can be deployed and executed by robots.</p>"},{"location":"resources/releases/#related-resources","title":"Related Resources","text":"<ul> <li>Processes - Processes that are released</li> <li>Jobs - Jobs that execute releases</li> <li>Robots - Robots that run releases</li> <li>Packages - Package files used in releases</li> </ul>"},{"location":"resources/releases/#methods","title":"Methods","text":""},{"location":"resources/releases/#get","title":"get()","text":"<p>Get a list of releases with optional filters.</p> <pre><code>releases = client.releases.get(\n    process_key=\"MyProcess\",     # Filter by process key\n    is_latest=True,             # Filter for latest versions\n    environment_id=123          # Filter by environment\n)\n</code></pre>"},{"location":"resources/releases/#parameters","title":"Parameters","text":"<ul> <li><code>process_key</code> (str, optional): Filter by process key</li> <li><code>is_latest</code> (bool, optional): Filter for latest versions only</li> <li><code>environment_id</code> (int, optional): Filter by environment ID</li> </ul>"},{"location":"resources/releases/#returns","title":"Returns","text":"<p>List[Dict]: List of release objects matching the filters</p>"},{"location":"resources/releases/#get_by_id","title":"get_by_id()","text":"<p>Get a specific release by ID.</p> <pre><code>release = client.releases.get_by_id(123)\n</code></pre>"},{"location":"resources/releases/#parameters_1","title":"Parameters","text":"<ul> <li><code>release_id</code> (int): ID of the release to retrieve</li> </ul>"},{"location":"resources/releases/#returns_1","title":"Returns","text":"<p>Dict: Release details</p>"},{"location":"resources/releases/#get_by_key","title":"get_by_key()","text":"<p>Get a release by its key.</p> <pre><code>release = client.releases.get_by_key(\"release-key-123\")\n</code></pre>"},{"location":"resources/releases/#parameters_2","title":"Parameters","text":"<ul> <li><code>key</code> (str): Release key</li> </ul>"},{"location":"resources/releases/#returns_2","title":"Returns","text":"<p>Dict: Release details</p>"},{"location":"resources/releases/#create","title":"create()","text":"<p>Create a new release.</p> <pre><code>release = client.releases.create({\n    \"Name\": \"MyProcess Release\",\n    \"ProcessKey\": \"MyProcess\",\n    \"ProcessVersion\": \"1.0.0\",\n    \"Description\": \"Production release\",\n    \"EnvironmentId\": 123,\n    \"EntryPointId\": \"Main\"\n})\n</code></pre>"},{"location":"resources/releases/#parameters_3","title":"Parameters","text":"<ul> <li><code>release_data</code> (Dict): Release configuration including:</li> <li><code>Name</code> (str, required): Release name</li> <li><code>ProcessKey</code> (str, required): Process identifier</li> <li><code>ProcessVersion</code> (str, required): Version string</li> <li><code>Description</code> (str, optional): Release description</li> <li><code>EnvironmentId</code> (int, optional): Target environment ID</li> <li><code>EntryPointId</code> (str, optional): Process entry point</li> </ul>"},{"location":"resources/releases/#returns_3","title":"Returns","text":"<p>Dict: Created release details</p>"},{"location":"resources/releases/#update","title":"update()","text":"<p>Update an existing release.</p> <pre><code>client.releases.update(123, {\n    \"Name\": \"Updated Release Name\",\n    \"Description\": \"Updated description\"\n})\n</code></pre>"},{"location":"resources/releases/#parameters_4","title":"Parameters","text":"<ul> <li><code>release_id</code> (int): ID of release to update</li> <li><code>release_data</code> (Dict): Updated release data</li> </ul>"},{"location":"resources/releases/#returns_4","title":"Returns","text":"<p>Dict: Updated release details</p>"},{"location":"resources/releases/#delete","title":"delete()","text":"<p>Delete a release by ID.</p> <pre><code>client.releases.delete(123)\n</code></pre>"},{"location":"resources/releases/#parameters_5","title":"Parameters","text":"<ul> <li><code>release_id</code> (int): ID of release to delete</li> </ul>"},{"location":"resources/releases/#delete_by_key","title":"delete_by_key()","text":"<p>Delete a release by key.</p> <pre><code>client.releases.delete_by_key(\"release-key-123\")\n</code></pre>"},{"location":"resources/releases/#parameters_6","title":"Parameters","text":"<ul> <li><code>key</code> (str): Release key to delete</li> </ul>"},{"location":"resources/releases/#update_process_settings","title":"update_process_settings()","text":"<p>Update process settings for a release.</p> <pre><code>client.releases.update_process_settings(123, {\n    \"MaxConcurrentJobs\": 5,\n    \"JobPriority\": \"Normal\",\n    \"AutoUpdate\": True\n})\n</code></pre>"},{"location":"resources/releases/#parameters_7","title":"Parameters","text":"<ul> <li><code>release_id</code> (int): ID of the release</li> <li><code>settings</code> (Dict): Process settings</li> </ul>"},{"location":"resources/releases/#returns_5","title":"Returns","text":"<p>Dict: Updated settings</p>"},{"location":"resources/releases/#get_latest_version","title":"get_latest_version()","text":"<p>Get the latest version of a release for a specific process.</p> <pre><code>latest = client.releases.get_latest_version(\n    process_key=\"MyProcess\",\n    environment_id=123\n)\n</code></pre>"},{"location":"resources/releases/#parameters_8","title":"Parameters","text":"<ul> <li><code>process_key</code> (str): Process identifier</li> <li><code>environment_id</code> (int, optional): Environment ID filter</li> </ul>"},{"location":"resources/releases/#returns_6","title":"Returns","text":"<p>Dict: Latest release details</p>"},{"location":"resources/releases/#examples","title":"Examples","text":""},{"location":"resources/releases/#release-management-workflow","title":"Release Management Workflow","text":"<pre><code># Create release from process\ndef create_release_from_process(process_key: str, version: str, environment_id: int):\n    release = client.releases.create({\n        \"Name\": f\"{process_key} v{version}\",\n        \"ProcessKey\": process_key,\n        \"ProcessVersion\": version,\n        \"EnvironmentId\": environment_id,\n        \"Description\": f\"Release of {process_key} version {version}\"\n    })\n\n    # Configure process settings\n    client.releases.update_process_settings(\n        release[\"Id\"],\n        {\n            \"MaxConcurrentJobs\": 3,\n            \"JobPriority\": \"Normal\",\n            \"AutoUpdate\": False\n        }\n    )\n\n    return release\n\n# Create releases for different environments\ndev_release = create_release_from_process(\"MyProcess\", \"1.0.0\", dev_env_id)\nprod_release = create_release_from_process(\"MyProcess\", \"1.0.0\", prod_env_id)\n</code></pre>"},{"location":"resources/releases/#version-control","title":"Version Control","text":"<pre><code>def manage_releases(process_key: str):\n    # Get all releases for process\n    releases = client.releases.get(process_key=process_key)\n\n    # Get latest release\n    latest = client.releases.get_latest_version(process_key)\n\n    # Archive old releases\n    for release in releases:\n        if release[\"Id\"] != latest[\"Id\"]:\n            # Archive release data\n            archived_data = {\n                \"Name\": f\"Archived_{release['Name']}\",\n                \"Description\": f\"Archived on {datetime.now()}\"\n            }\n            client.releases.update(release[\"Id\"], archived_data)\n\n# Manage releases\nmanage_releases(\"MyProcess\")\n</code></pre>"},{"location":"resources/releases/#environment-promotion","title":"Environment Promotion","text":"<pre><code>def promote_to_production(release_key: str):\n    # Get release details\n    release = client.releases.get_by_key(release_key)\n\n    # Create production release\n    prod_release = client.releases.create({\n        \"Name\": f\"{release['Name']}_Production\",\n        \"ProcessKey\": release[\"ProcessKey\"],\n        \"ProcessVersion\": release[\"ProcessVersion\"],\n        \"EnvironmentId\": prod_environment_id,\n        \"Description\": f\"Production release promoted from {release_key}\"\n    })\n\n    # Copy process settings\n    settings = client.releases.get_process_settings(release[\"Id\"])\n    client.releases.update_process_settings(prod_release[\"Id\"], settings)\n\n    return prod_release\n\n# Promote release to production\nprod_release = promote_to_production(\"dev-release-key-123\")\n</code></pre>"},{"location":"resources/releases/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to create release with invalid process key\n    client.releases.create({\n        \"Name\": \"Invalid Release\",\n        \"ProcessKey\": \"NonExistentProcess\",\n        \"ProcessVersion\": \"1.0.0\"\n    })\nexcept HTTPError as e:\n    if e.response.status_code == 404:\n        print(\"Process not found\")\n    elif e.response.status_code == 400:\n        print(\"Invalid release configuration\")\n    else:\n        print(f\"Error creating release: {e}\")\n</code></pre>"},{"location":"resources/releases/#best-practices","title":"Best Practices","text":"<ol> <li>Use consistent naming conventions for releases</li> <li>Include version information in release names</li> <li>Provide detailed descriptions for releases</li> <li>Configure appropriate process settings per environment</li> <li>Archive or delete obsolete releases</li> <li>Test releases in development before production</li> <li>Document release dependencies</li> <li>Maintain release history</li> <li>Use environment-specific configurations</li> </ol>"},{"location":"resources/releases/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control access to release management</li> <li>Audit release changes</li> <li>Secure release configurations</li> <li>Review process settings before deployment</li> <li>Monitor release execution permissions</li> <li>Validate release configurations</li> </ol>"},{"location":"resources/releases/#see-also","title":"See Also","text":"<ul> <li>UiPath Release Documentation</li> <li>Release Management</li> <li>Release Security</li> <li>Processes for process management</li> <li>Jobs for release execution </li> </ul>"},{"location":"resources/robots/","title":"Robots","text":"<p>The Robots resource allows you to manage UiPath robots in your organization.</p>"},{"location":"resources/robots/#related-resources","title":"Related Resources","text":"<ul> <li>Machines - Manage machines where robots run</li> <li>Jobs - Execute and monitor robot jobs</li> <li>Releases - Manage process releases that robots can execute</li> </ul>"},{"location":"resources/robots/#methods","title":"Methods","text":""},{"location":"resources/robots/#get","title":"get()","text":"<p>Get a list of robots with optional filters.</p> <pre><code>robots = client.robots.get(\n    name=\"MyRobot\",           # Filter by robot name\n    machine_id=123,           # Filter by machine ID\n    type=\"Unattended\",        # Filter by robot type\n    is_connected=True,        # Filter by connection status\n    user_id=456              # Filter by associated user ID\n)\n</code></pre>"},{"location":"resources/robots/#parameters","title":"Parameters","text":"<ul> <li><code>name</code> (str, optional): Filter by robot name</li> <li><code>machine_id</code> (int, optional): Filter by machine ID</li> <li><code>type</code> (str, optional): Filter by robot type. Valid values:</li> <li><code>Unattended</code></li> <li><code>Attended</code></li> <li><code>NonProduction</code></li> <li><code>TestAutomation</code></li> <li><code>is_connected</code> (bool, optional): Filter by connection status</li> <li><code>user_id</code> (int, optional): Filter by associated user ID</li> </ul>"},{"location":"resources/robots/#returns","title":"Returns","text":"<p>List[Dict]: List of robot objects matching the filters</p>"},{"location":"resources/robots/#get_by_id","title":"get_by_id()","text":"<p>Get a specific robot by ID.</p> <pre><code>robot = client.robots.get_by_id(123)\n</code></pre>"},{"location":"resources/robots/#parameters_1","title":"Parameters","text":"<ul> <li><code>robot_id</code> (int): ID of the robot to retrieve</li> </ul>"},{"location":"resources/robots/#returns_1","title":"Returns","text":"<p>Dict: Robot details</p>"},{"location":"resources/robots/#create","title":"create()","text":"<p>Create a new robot.</p> <pre><code>robot = client.robots.create({\n    \"Name\": \"MyRobot\",\n    \"MachineId\": 123,\n    \"Type\": \"Unattended\",\n    \"Username\": \"domain\\\\user\",\n    \"Password\": \"password\",  # Optional\n    \"Description\": \"My robot description\"\n})\n</code></pre>"},{"location":"resources/robots/#parameters_2","title":"Parameters","text":"<ul> <li><code>robot_data</code> (Dict): Robot configuration including:</li> <li><code>Name</code> (str, required): Robot name</li> <li><code>MachineId</code> (int, required): Associated machine ID</li> <li><code>Type</code> (str, required): Robot type</li> <li><code>Username</code> (str, required): Associated Windows username</li> <li><code>Password</code> (str, optional): Windows password</li> <li><code>Description</code> (str, optional): Robot description</li> </ul>"},{"location":"resources/robots/#returns_2","title":"Returns","text":"<p>Dict: Created robot details</p>"},{"location":"resources/robots/#update","title":"update()","text":"<p>Update an existing robot.</p> <pre><code>client.robots.update(123, {\n    \"Name\": \"NewRobotName\",\n    \"Description\": \"Updated description\"\n})\n</code></pre>"},{"location":"resources/robots/#parameters_3","title":"Parameters","text":"<ul> <li><code>robot_id</code> (int): ID of robot to update</li> <li><code>robot_data</code> (Dict): Updated robot data</li> </ul>"},{"location":"resources/robots/#returns_3","title":"Returns","text":"<p>Dict: Updated robot details</p>"},{"location":"resources/robots/#delete","title":"delete()","text":"<p>Delete a robot.</p> <pre><code>client.robots.delete(123)\n</code></pre>"},{"location":"resources/robots/#parameters_4","title":"Parameters","text":"<ul> <li><code>robot_id</code> (int): ID of robot to delete</li> </ul>"},{"location":"resources/robots/#get_license","title":"get_license()","text":"<p>Get license information for a robot.</p> <pre><code>license_info = client.robots.get_license(123)\n</code></pre>"},{"location":"resources/robots/#parameters_5","title":"Parameters","text":"<ul> <li><code>robot_id</code> (int): ID of the robot</li> </ul>"},{"location":"resources/robots/#returns_4","title":"Returns","text":"<p>Dict: Robot license information</p>"},{"location":"resources/robots/#toggle_enabled","title":"toggle_enabled()","text":"<p>Enable or disable a robot.</p> <pre><code>client.robots.toggle_enabled(123, enabled=True)\n</code></pre>"},{"location":"resources/robots/#parameters_6","title":"Parameters","text":"<ul> <li><code>robot_id</code> (int): ID of the robot</li> <li><code>enabled</code> (bool): Whether to enable or disable the robot</li> </ul>"},{"location":"resources/robots/#examples","title":"Examples","text":""},{"location":"resources/robots/#creating-and-configuring-a-robot","title":"Creating and Configuring a Robot","text":"<pre><code># Create a new robot\nrobot = client.robots.create({\n    \"Name\": \"ProcessingBot\",\n    \"MachineId\": 123,\n    \"Type\": \"Unattended\",\n    \"Username\": \"domain\\\\processuser\"\n})\n\n# Enable the robot\nclient.robots.toggle_enabled(robot[\"Id\"], enabled=True)\n\n# Update robot credentials\nclient.robots.update_user(\n    robot[\"Id\"], \n    {\n        \"Username\": \"domain\\\\newuser\",\n        \"Password\": \"newpassword\"\n    }\n)\n</code></pre>"},{"location":"resources/robots/#managing-robot-status","title":"Managing Robot Status","text":"<pre><code># Get robot status\nstatus = client.robots.get_status(123)\n\n# Get active sessions\nsessions = client.robots.get_sessions(123)\n\n# Get machine name\nmachine_name = client.robots.get_machine_name_by_id(123)\n</code></pre>"},{"location":"resources/robots/#filtering-robots","title":"Filtering Robots","text":"<pre><code># Get all connected unattended robots\nrobots = client.robots.get(\n    type=\"Unattended\",\n    is_connected=True\n)\n\n# Get robots on specific machine\nrobots = client.robots.get(machine_id=123)\n\n# Get robots by name pattern\nrobots = client.robots.get(name=\"ProcessingBot*\")\n</code></pre>"},{"location":"resources/robots/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    robot = client.robots.get_by_id(999)\nexcept HTTPError as e:\n    if e.response.status_code == 404:\n        print(\"Robot not found\")\n    else:\n        print(f\"Error managing robot: {e}\")\n</code></pre>"},{"location":"resources/robots/#see-also","title":"See Also","text":"<ul> <li>UiPath Robots Documentation</li> <li>Robot Security</li> <li>Managing Robot Credentials </li> </ul>"},{"location":"resources/schedules/","title":"Schedules","text":"<p>The Schedules resource allows you to manage automated job scheduling in UiPath Orchestrator. Schedules enable you to run processes automatically based on time-based triggers.</p>"},{"location":"resources/schedules/#related-resources","title":"Related Resources","text":"<ul> <li>Jobs - Jobs created by schedules</li> <li>Processes - Processes run by schedules</li> <li>Robots - Robots executing scheduled jobs</li> </ul>"},{"location":"resources/schedules/#methods","title":"Methods","text":""},{"location":"resources/schedules/#get","title":"get()","text":"<p>Get a list of schedules with optional filters.</p> <pre><code>schedules = client.schedules.get(\n    enabled=True,           # Filter by enabled status\n    process_key=\"MyProcess\" # Filter by process\n)\n</code></pre>"},{"location":"resources/schedules/#parameters","title":"Parameters","text":"<ul> <li><code>enabled</code> (bool, optional): Filter by enabled status</li> <li><code>process_key</code> (str, optional): Filter by process key</li> </ul>"},{"location":"resources/schedules/#returns","title":"Returns","text":"<p>List[Dict]: List of schedule objects matching the filters</p>"},{"location":"resources/schedules/#get_by_id","title":"get_by_id()","text":"<p>Get a specific schedule by ID.</p> <pre><code>schedule = client.schedules.get_by_id(123)\n</code></pre>"},{"location":"resources/schedules/#parameters_1","title":"Parameters","text":"<ul> <li><code>schedule_id</code> (int): ID of the schedule to retrieve</li> </ul>"},{"location":"resources/schedules/#returns_1","title":"Returns","text":"<p>Dict: Schedule details</p>"},{"location":"resources/schedules/#create","title":"create()","text":"<p>Create a new schedule.</p> <pre><code>schedule = client.schedules.create({\n    \"Name\": \"DailyReport\",\n    \"ReleaseKey\": \"release-key-123\",\n    \"Enabled\": True,\n    \"TimeZoneId\": \"UTC\",\n    \"CronExpression\": \"0 0 8 * * ?\",  # 8 AM daily\n    \"StartProcessCron\": {\n        \"RobotIds\": [123, 456],\n        \"JobPriority\": \"Normal\",\n        \"Strategy\": \"Specific\"\n    }\n})\n</code></pre>"},{"location":"resources/schedules/#parameters_2","title":"Parameters","text":"<ul> <li><code>schedule_data</code> (Dict): Schedule configuration including:</li> <li><code>Name</code> (str, required): Schedule name</li> <li><code>ReleaseKey</code> (str, required): Process release key</li> <li><code>Enabled</code> (bool, required): Whether schedule is enabled</li> <li><code>TimeZoneId</code> (str, required): Timezone for schedule</li> <li><code>CronExpression</code> (str, required): Cron expression for timing</li> <li><code>StartProcessCron</code> (Dict, required): Process execution settings</li> </ul>"},{"location":"resources/schedules/#returns_2","title":"Returns","text":"<p>Dict: Created schedule details</p>"},{"location":"resources/schedules/#update","title":"update()","text":"<p>Update an existing schedule.</p> <pre><code>client.schedules.update(123, {\n    \"Enabled\": False,\n    \"CronExpression\": \"0 0 9 * * ?\"  # Change to 9 AM\n})\n</code></pre>"},{"location":"resources/schedules/#parameters_3","title":"Parameters","text":"<ul> <li><code>schedule_id</code> (int): ID of schedule to update</li> <li><code>schedule_data</code> (Dict): Updated schedule data</li> </ul>"},{"location":"resources/schedules/#delete","title":"delete()","text":"<p>Delete a schedule.</p> <pre><code>client.schedules.delete(123)\n</code></pre>"},{"location":"resources/schedules/#parameters_4","title":"Parameters","text":"<ul> <li><code>schedule_id</code> (int): ID of schedule to delete</li> </ul>"},{"location":"resources/schedules/#examples","title":"Examples","text":""},{"location":"resources/schedules/#schedule-creation","title":"Schedule Creation","text":"<pre><code>def create_business_hours_schedule(process_key: str, robot_ids: List[int]):\n    \"\"\"Create schedule for business hours execution\"\"\"\n    schedule = client.schedules.create({\n        \"Name\": f\"{process_key}_BusinessHours\",\n        \"ReleaseKey\": process_key,\n        \"Enabled\": True,\n        \"TimeZoneId\": \"America/New_York\",\n        \"CronExpression\": \"0 0 9-17 ? * MON-FRI\",  # 9 AM to 5 PM weekdays\n        \"StartProcessCron\": {\n            \"RobotIds\": robot_ids,\n            \"JobPriority\": \"Normal\",\n            \"Strategy\": \"Specific\",\n            \"InputArguments\": {\n                \"BusinessHours\": True\n            }\n        }\n    })\n\n    return schedule\n\n# Create business hours schedule\nschedule = create_business_hours_schedule(\n    process_key=\"process-key-123\",\n    robot_ids=[123, 456]\n)\n</code></pre>"},{"location":"resources/schedules/#schedule-management","title":"Schedule Management","text":"<pre><code>def manage_schedule_status(schedule_id: int, active_hours: tuple):\n    \"\"\"Enable/disable schedule based on hours\"\"\"\n    from datetime import datetime\n\n    current_hour = datetime.now().hour\n    start_hour, end_hour = active_hours\n\n    # Get current schedule\n    schedule = client.schedules.get_by_id(schedule_id)\n\n    # Check if schedule should be enabled\n    should_be_enabled = start_hour &lt;= current_hour &lt; end_hour\n\n    if schedule[\"Enabled\"] != should_be_enabled:\n        client.schedules.update(schedule_id, {\n            \"Enabled\": should_be_enabled\n        })\n\n        return {\n            \"schedule_id\": schedule_id,\n            \"status_changed\": True,\n            \"now_enabled\": should_be_enabled\n        }\n\n    return {\n        \"schedule_id\": schedule_id,\n        \"status_changed\": False,\n        \"now_enabled\": schedule[\"Enabled\"]\n    }\n\n# Manage schedule for business hours\nresult = manage_schedule_status(123, (9, 17))\n</code></pre>"},{"location":"resources/schedules/#cron-expression-management","title":"Cron Expression Management","text":"<pre><code>def update_schedule_timing(schedule_id: int, timing_config: Dict):\n    \"\"\"Update schedule timing configuration\"\"\"\n    def build_cron_expression(config):\n        # Convert timing config to cron expression\n        minute = config.get(\"minute\", \"0\")\n        hour = config.get(\"hour\", \"*\")\n        day = config.get(\"day\", \"*\")\n        month = config.get(\"month\", \"*\")\n        weekday = config.get(\"weekday\", \"?\")\n\n        return f\"{minute} {hour} {day} {month} {weekday}\"\n\n    cron_expression = build_cron_expression(timing_config)\n\n    updated = client.schedules.update(schedule_id, {\n        \"CronExpression\": cron_expression,\n        \"TimeZoneId\": timing_config.get(\"timezone\", \"UTC\")\n    })\n\n    return {\n        \"schedule_id\": schedule_id,\n        \"new_expression\": cron_expression,\n        \"timezone\": updated[\"TimeZoneId\"]\n    }\n\n# Update schedule timing\ntiming = {\n    \"minute\": \"0\",\n    \"hour\": \"*/2\",  # Every 2 hours\n    \"weekday\": \"MON-FRI\",\n    \"timezone\": \"Europe/London\"\n}\nresult = update_schedule_timing(123, timing)\n</code></pre>"},{"location":"resources/schedules/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to create schedule with invalid cron expression\n    client.schedules.create({\n        \"Name\": \"InvalidSchedule\",\n        \"ReleaseKey\": \"release-key-123\",\n        \"CronExpression\": \"invalid\",\n        \"TimeZoneId\": \"UTC\",\n        \"Enabled\": True\n    })\nexcept HTTPError as e:\n    if e.response.status_code == 400:\n        print(\"Invalid schedule configuration\")\n    elif e.response.status_code == 404:\n        print(\"Process release not found\")\n    else:\n        print(f\"Error creating schedule: {e}\")\n</code></pre>"},{"location":"resources/schedules/#best-practices","title":"Best Practices","text":"<ol> <li>Use descriptive schedule names</li> <li>Consider timezone differences</li> <li>Validate cron expressions</li> <li>Monitor schedule execution</li> <li>Document schedule purposes</li> <li>Regular schedule review</li> <li>Test schedule changes</li> <li>Maintain execution logs</li> <li>Consider resource availability</li> </ol>"},{"location":"resources/schedules/#security-considerations","title":"Security Considerations","text":"<ol> <li>Control schedule access</li> <li>Audit schedule changes</li> <li>Monitor execution patterns</li> <li>Validate process inputs</li> <li>Review robot assignments</li> <li>Regular security checks</li> <li>Document access controls</li> </ol>"},{"location":"resources/schedules/#see-also","title":"See Also","text":"<ul> <li>UiPath Schedules Documentation</li> <li>Cron Expression Guide</li> <li>Schedule Management</li> <li>Jobs for job execution</li> <li>Robots for robot management </li> </ul>"},{"location":"resources/settings/","title":"Settings","text":"<p>The Settings resource allows you to manage UiPath Orchestrator configuration settings, including system preferences, default values, and feature toggles.</p>"},{"location":"resources/settings/#related-resources","title":"Related Resources","text":"<ul> <li>Status - System status affected by settings</li> <li>Maintenance - System maintenance configuration</li> <li>Directory - User and authentication settings</li> </ul>"},{"location":"resources/settings/#methods","title":"Methods","text":""},{"location":"resources/settings/#get_settings","title":"get_settings()","text":"<p>Get current system settings.</p> <pre><code>settings = client.settings.get_settings()\n</code></pre>"},{"location":"resources/settings/#returns","title":"Returns","text":"<p>Dict: Current system settings including: - Authentication settings - Email configuration - Performance settings - Feature flags - Default values</p>"},{"location":"resources/settings/#update_settings","title":"update_settings()","text":"<p>Update system settings.</p> <pre><code>client.settings.update_settings({\n    \"SmtpSettings\": {\n        \"Host\": \"smtp.company.com\",\n        \"Port\": 587,\n        \"EnableSsl\": True\n    },\n    \"AuthenticationSettings\": {\n        \"LoginTimeout\": 30,\n        \"MaxLoginAttempts\": 5\n    }\n})\n</code></pre>"},{"location":"resources/settings/#parameters","title":"Parameters","text":"<ul> <li><code>settings</code> (Dict): Settings to update</li> </ul>"},{"location":"resources/settings/#get_feature_flags","title":"get_feature_flags()","text":"<p>Get status of feature flags.</p> <pre><code>flags = client.settings.get_feature_flags()\n</code></pre>"},{"location":"resources/settings/#returns_1","title":"Returns","text":"<p>Dict: Feature flag states</p>"},{"location":"resources/settings/#update_feature_flag","title":"update_feature_flag()","text":"<p>Update a feature flag setting.</p> <pre><code>client.settings.update_feature_flag(\n    flag_name=\"NewFeature\",\n    enabled=True\n)\n</code></pre>"},{"location":"resources/settings/#parameters_1","title":"Parameters","text":"<ul> <li><code>flag_name</code> (str): Name of the feature flag</li> <li><code>enabled</code> (bool): Whether to enable the feature</li> </ul>"},{"location":"resources/settings/#examples","title":"Examples","text":""},{"location":"resources/settings/#email-configuration","title":"Email Configuration","text":"<pre><code>def configure_email_settings(config: Dict):\n    \"\"\"Configure system email settings\"\"\"\n    try:\n        # Update SMTP settings\n        client.settings.update_settings({\n            \"SmtpSettings\": {\n                \"Host\": config[\"host\"],\n                \"Port\": config[\"port\"],\n                \"EnableSsl\": config[\"ssl\"],\n                \"Username\": config[\"username\"],\n                \"Password\": config[\"password\"],\n                \"FromAddress\": config[\"from_address\"],\n                \"UseDefaultCredentials\": False\n            }\n        })\n\n        # Test configuration\n        test_result = client.settings.test_email_settings()\n\n        return {\n            \"success\": test_result[\"Success\"],\n            \"message\": test_result.get(\"Message\", \"Settings updated\")\n        }\n\n    except Exception as e:\n        return {\n            \"success\": False,\n            \"message\": str(e)\n        }\n\n# Configure email\nemail_config = {\n    \"host\": \"smtp.company.com\",\n    \"port\": 587,\n    \"ssl\": True,\n    \"username\": \"notifications@company.com\",\n    \"password\": \"secure_password\",\n    \"from_address\": \"uipath@company.com\"\n}\nresult = configure_email_settings(email_config)\n</code></pre>"},{"location":"resources/settings/#authentication-settings","title":"Authentication Settings","text":"<pre><code>def configure_authentication(settings: Dict):\n    \"\"\"Configure authentication settings\"\"\"\n    auth_settings = {\n        \"AuthenticationSettings\": {\n            \"LoginTimeout\": settings[\"timeout\"],\n            \"MaxLoginAttempts\": settings[\"max_attempts\"],\n            \"LockoutDuration\": settings[\"lockout_minutes\"],\n            \"RequireMfa\": settings[\"require_mfa\"],\n            \"PasswordPolicy\": {\n                \"MinLength\": settings[\"min_password_length\"],\n                \"RequireUppercase\": True,\n                \"RequireLowercase\": True,\n                \"RequireDigit\": True,\n                \"RequireSpecialCharacter\": True\n            }\n        }\n    }\n\n    return client.settings.update_settings(auth_settings)\n\n# Configure authentication\nauth_config = {\n    \"timeout\": 30,\n    \"max_attempts\": 5,\n    \"lockout_minutes\": 15,\n    \"require_mfa\": True,\n    \"min_password_length\": 12\n}\nconfigure_authentication(auth_config)\n</code></pre>"},{"location":"resources/settings/#feature-management","title":"Feature Management","text":"<pre><code>def manage_features(environment: str):\n    \"\"\"Manage feature flags based on environment\"\"\"\n    # Get current flags\n    flags = client.settings.get_feature_flags()\n\n    # Define environment-specific features\n    env_features = {\n        \"development\": {\n            \"NewFeature\": True,\n            \"BetaFeature\": True,\n            \"ExperimentalApi\": True\n        },\n        \"production\": {\n            \"NewFeature\": False,\n            \"BetaFeature\": False,\n            \"ExperimentalApi\": False\n        }\n    }\n\n    # Update flags\n    updates = []\n    for flag, enabled in env_features[environment].items():\n        try:\n            client.settings.update_feature_flag(\n                flag_name=flag,\n                enabled=enabled\n            )\n            updates.append({\n                \"flag\": flag,\n                \"status\": \"updated\",\n                \"enabled\": enabled\n            })\n        except Exception as e:\n            updates.append({\n                \"flag\": flag,\n                \"status\": \"error\",\n                \"error\": str(e)\n            })\n\n    return updates\n\n# Manage features for environment\nupdates = manage_features(\"development\")\n</code></pre>"},{"location":"resources/settings/#performance-settings","title":"Performance Settings","text":"<pre><code>def optimize_performance_settings(load_profile: str):\n    \"\"\"Optimize system settings for different load profiles\"\"\"\n    profiles = {\n        \"light\": {\n            \"MaxConcurrentJobs\": 10,\n            \"JobExpirationDays\": 30,\n            \"LogRetentionDays\": 90,\n            \"QueueRetentionDays\": 30\n        },\n        \"medium\": {\n            \"MaxConcurrentJobs\": 50,\n            \"JobExpirationDays\": 15,\n            \"LogRetentionDays\": 60,\n            \"QueueRetentionDays\": 15\n        },\n        \"heavy\": {\n            \"MaxConcurrentJobs\": 100,\n            \"JobExpirationDays\": 7,\n            \"LogRetentionDays\": 30,\n            \"QueueRetentionDays\": 7\n        }\n    }\n\n    settings = profiles[load_profile]\n    return client.settings.update_settings({\n        \"PerformanceSettings\": settings\n    })\n\n# Optimize for load\noptimize_performance_settings(\"medium\")\n</code></pre>"},{"location":"resources/settings/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to update sensitive settings\n    client.settings.update_settings({\n        \"SecuritySettings\": {\n            \"EnabledCiphers\": [\"TLS_1_2\"]\n        }\n    })\nexcept HTTPError as e:\n    if e.response.status_code == 403:\n        print(\"Insufficient permissions\")\n    elif e.response.status_code == 400:\n        print(\"Invalid settings configuration\")\n    else:\n        print(f\"Error updating settings: {e}\")\n</code></pre>"},{"location":"resources/settings/#best-practices","title":"Best Practices","text":"<ol> <li>Document settings changes</li> <li>Test in non-production first</li> <li>Use environment-specific configs</li> <li>Regular settings review</li> <li>Backup settings before changes</li> <li>Monitor impact of changes</li> <li>Maintain settings history</li> <li>Validate configurations</li> <li>Control settings access</li> </ol>"},{"location":"resources/settings/#security-considerations","title":"Security Considerations","text":"<ol> <li>Restrict settings access</li> <li>Audit settings changes</li> <li>Secure sensitive settings</li> <li>Regular security review</li> <li>Validate setting values</li> <li>Monitor configuration changes</li> <li>Document security settings</li> </ol>"},{"location":"resources/settings/#see-also","title":"See Also","text":"<ul> <li>UiPath Settings Documentation</li> <li>Security Configuration</li> <li>Performance Tuning</li> <li>Status for system monitoring</li> <li>Maintenance for system maintenance </li> </ul>"},{"location":"resources/stats/","title":"Stats","text":"<p>The Stats resource provides detailed statistics and metrics about UiPath Orchestrator operations, including job execution, license usage, and system performance.</p>"},{"location":"resources/stats/#related-resources","title":"Related Resources","text":"<ul> <li>Status - Overall system status</li> <li>Jobs - Job execution details</li> <li>Robots - Robot performance metrics</li> <li>Queues - Queue processing metrics</li> </ul>"},{"location":"resources/stats/#methods","title":"Methods","text":""},{"location":"resources/stats/#get_jobs_stats","title":"get_jobs_stats()","text":"<p>Get statistics about job execution.</p> <pre><code>stats = client.stats.get_jobs_stats(\n    from_date=\"2023-01-01\",\n    to_date=\"2023-12-31\"\n)\n</code></pre>"},{"location":"resources/stats/#parameters","title":"Parameters","text":"<ul> <li><code>from_date</code> (str, optional): Start date for stats (ISO format)</li> <li><code>to_date</code> (str, optional): End date for stats (ISO format)</li> </ul>"},{"location":"resources/stats/#returns","title":"Returns","text":"<p>Dict: Job statistics including: - Total jobs executed - Success/failure rates - Average execution time - Peak execution times</p>"},{"location":"resources/stats/#get_license_stats","title":"get_license_stats()","text":"<p>Get detailed license usage statistics.</p> <pre><code>stats = client.stats.get_license_stats(days=30)\n</code></pre>"},{"location":"resources/stats/#parameters_1","title":"Parameters","text":"<ul> <li><code>days</code> (int, optional): Number of days to analyze (default: 30)</li> </ul>"},{"location":"resources/stats/#returns_1","title":"Returns","text":"<p>Dict: License statistics including: - Daily usage patterns - Peak usage periods - Usage by license type - Compliance metrics</p>"},{"location":"resources/stats/#get_queue_stats","title":"get_queue_stats()","text":"<p>Get statistics about queue processing.</p> <pre><code>stats = client.stats.get_queue_stats(\n    queue_name=\"InvoiceQueue\"\n)\n</code></pre>"},{"location":"resources/stats/#parameters_2","title":"Parameters","text":"<ul> <li><code>queue_name</code> (str, optional): Filter by specific queue</li> </ul>"},{"location":"resources/stats/#returns_2","title":"Returns","text":"<p>Dict: Queue statistics including: - Items processed - Processing times - Success/failure rates - Queue throughput</p>"},{"location":"resources/stats/#examples","title":"Examples","text":""},{"location":"resources/stats/#job-performance-analysis","title":"Job Performance Analysis","text":"<pre><code>def analyze_job_performance(days: int = 30):\n    \"\"\"Analyze job execution performance\"\"\"\n    from datetime import datetime, timedelta\n\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days)\n\n    stats = client.stats.get_jobs_stats(\n        from_date=start_date.isoformat(),\n        to_date=end_date.isoformat()\n    )\n\n    analysis = {\n        \"total_jobs\": stats[\"TotalJobs\"],\n        \"success_rate\": stats[\"SuccessfulJobs\"] / stats[\"TotalJobs\"] * 100,\n        \"avg_duration\": stats[\"AverageExecutionTime\"],\n        \"peak_time\": stats[\"PeakExecutionTime\"],\n        \"period\": f\"{days} days\",\n        \"timestamp\": datetime.now().isoformat()\n    }\n\n    return analysis\n\n# Analyze job performance\nperformance = analyze_job_performance(days=30)\n</code></pre>"},{"location":"resources/stats/#license-usage-trends","title":"License Usage Trends","text":"<pre><code>def analyze_license_trends(days: int = 90):\n    \"\"\"Analyze license usage patterns\"\"\"\n    stats = client.stats.get_license_stats(days=days)\n\n    # Analyze daily patterns\n    daily_usage = {}\n    peak_usage = 0\n    peak_date = None\n\n    for day in stats[\"DailyUsage\"]:\n        usage = day[\"UsedLicenses\"]\n        date = datetime.fromisoformat(day[\"Date\"])\n        daily_usage[date.date().isoformat()] = usage\n\n        if usage &gt; peak_usage:\n            peak_usage = usage\n            peak_date = date\n\n    return {\n        \"average_usage\": sum(daily_usage.values()) / len(daily_usage),\n        \"peak_usage\": peak_usage,\n        \"peak_date\": peak_date.isoformat(),\n        \"usage_trend\": daily_usage\n    }\n\n# Analyze license trends\ntrends = analyze_license_trends()\n</code></pre>"},{"location":"resources/stats/#queue-performance-monitoring","title":"Queue Performance Monitoring","text":"<pre><code>def monitor_queue_performance(queue_names: List[str]):\n    \"\"\"Monitor performance of multiple queues\"\"\"\n    performance = {}\n\n    for queue in queue_names:\n        stats = client.stats.get_queue_stats(queue_name=queue)\n\n        performance[queue] = {\n            \"processed_items\": stats[\"ProcessedItems\"],\n            \"success_rate\": stats[\"SuccessRate\"],\n            \"avg_processing_time\": stats[\"AverageProcessingTime\"],\n            \"throughput\": stats[\"ItemsPerHour\"]\n        }\n\n    return performance\n\n# Monitor queues\nqueues = [\"InvoiceQueue\", \"OrderQueue\", \"SupportQueue\"]\nqueue_performance = monitor_queue_performance(queues)\n</code></pre>"},{"location":"resources/stats/#performance-dashboard","title":"Performance Dashboard","text":"<pre><code>def generate_performance_dashboard():\n    \"\"\"Generate comprehensive performance dashboard\"\"\"\n    dashboard = {\n        \"jobs\": client.stats.get_jobs_stats(\n            from_date=(datetime.now() - timedelta(days=7)).isoformat()\n        ),\n        \"licenses\": client.stats.get_license_stats(days=7),\n        \"queues\": client.stats.get_queue_stats(),\n        \"generated_at\": datetime.now().isoformat()\n    }\n\n    # Calculate key metrics\n    dashboard[\"metrics\"] = {\n        \"job_success_rate\": (\n            dashboard[\"jobs\"][\"SuccessfulJobs\"] /\n            dashboard[\"jobs\"][\"TotalJobs\"] * 100\n        ),\n        \"license_utilization\": (\n            dashboard[\"licenses\"][\"CurrentUsage\"] /\n            dashboard[\"licenses\"][\"TotalLicenses\"] * 100\n        ),\n        \"queue_efficiency\": (\n            dashboard[\"queues\"][\"SuccessfulItems\"] /\n            dashboard[\"queues\"][\"TotalItems\"] * 100\n        )\n    }\n\n    return dashboard\n\n# Generate dashboard\ndashboard = generate_performance_dashboard()\n</code></pre>"},{"location":"resources/stats/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\nfrom datetime import datetime, timedelta\n\ndef safe_stats_collection():\n    try:\n        # Collect all stats\n        end_date = datetime.now()\n        start_date = end_date - timedelta(days=30)\n\n        return {\n            \"success\": True,\n            \"data\": {\n                \"jobs\": client.stats.get_jobs_stats(\n                    from_date=start_date.isoformat(),\n                    to_date=end_date.isoformat()\n                ),\n                \"licenses\": client.stats.get_license_stats(),\n                \"queues\": client.stats.get_queue_stats()\n            }\n        }\n    except HTTPError as e:\n        return {\n            \"success\": False,\n            \"error\": f\"HTTP Error: {e.response.status_code}\",\n            \"message\": str(e)\n        }\n    except Exception as e:\n        return {\n            \"success\": False,\n            \"error\": \"General Error\",\n            \"message\": str(e)\n        }\n</code></pre>"},{"location":"resources/stats/#best-practices","title":"Best Practices","text":"<ol> <li>Regular metrics collection</li> <li>Trend analysis over time</li> <li>Set performance baselines</li> <li>Monitor peak usage periods</li> <li>Track performance degradation</li> <li>Document performance patterns</li> <li>Set up alerting thresholds</li> <li>Regular reporting</li> <li>Historical data retention</li> </ol>"},{"location":"resources/stats/#security-considerations","title":"Security Considerations","text":"<ol> <li>Protect metrics data</li> <li>Control access to statistics</li> <li>Audit metric access</li> <li>Secure reporting channels</li> <li>Data retention policies</li> <li>Metrics data privacy</li> <li>Access logging</li> </ol>"},{"location":"resources/stats/#see-also","title":"See Also","text":"<ul> <li>UiPath Monitoring Documentation</li> <li>Performance Optimization</li> <li>Reporting</li> <li>Status for system health</li> <li>Jobs for job management </li> </ul>"},{"location":"resources/status/","title":"Status","text":"<p>The Status resource allows you to monitor the health and operational status of UiPath Orchestrator components and services.</p>"},{"location":"resources/status/#related-resources","title":"Related Resources","text":"<ul> <li>Maintenance - System maintenance operations</li> <li>Stats - System statistics and metrics</li> <li>Logs - System and process logs</li> </ul>"},{"location":"resources/status/#methods","title":"Methods","text":""},{"location":"resources/status/#get_status","title":"get_status()","text":"<p>Get the overall system status.</p> <pre><code>status = client.status.get_status()\n</code></pre>"},{"location":"resources/status/#returns","title":"Returns","text":"<p>Dict: System status information including: - Service health - Component status - Version information - License status</p>"},{"location":"resources/status/#get_license_status","title":"get_license_status()","text":"<p>Get the status of system licensing.</p> <pre><code>license_status = client.status.get_license_status()\n</code></pre>"},{"location":"resources/status/#returns_1","title":"Returns","text":"<p>Dict: License status information including: - License validity - Expiration details - Usage metrics - Compliance status</p>"},{"location":"resources/status/#get_component_status","title":"get_component_status()","text":"<p>Get status of specific system components.</p> <pre><code>components = client.status.get_component_status()\n</code></pre>"},{"location":"resources/status/#returns_2","title":"Returns","text":"<p>Dict: Status of various system components including: - Web API - Job Service - Queues - Storage - Database</p>"},{"location":"resources/status/#get_version","title":"get_version()","text":"<p>Get system version information.</p> <pre><code>version = client.status.get_version()\n</code></pre>"},{"location":"resources/status/#returns_3","title":"Returns","text":"<p>Dict: Version information including: - Orchestrator version - API version - Database version</p>"},{"location":"resources/status/#examples","title":"Examples","text":""},{"location":"resources/status/#system-health-check","title":"System Health Check","text":"<pre><code>def check_system_health():\n    \"\"\"Comprehensive system health check\"\"\"\n    results = {\n        \"status\": client.status.get_status(),\n        \"license\": client.status.get_license_status(),\n        \"components\": client.status.get_component_status(),\n        \"version\": client.status.get_version()\n    }\n\n    # Analyze health status\n    health_summary = {\n        \"is_healthy\": all(\n            component[\"IsHealthy\"]\n            for component in results[\"components\"]\n        ),\n        \"license_valid\": results[\"license\"][\"IsValid\"],\n        \"version\": results[\"version\"][\"Version\"],\n        \"timestamp\": datetime.now().isoformat()\n    }\n\n    return health_summary\n\n# Run health check\nhealth = check_system_health()\n</code></pre>"},{"location":"resources/status/#component-monitoring","title":"Component Monitoring","text":"<pre><code>def monitor_components(threshold_minutes: int = 5):\n    \"\"\"Monitor component status with alerts\"\"\"\n    components = client.status.get_component_status()\n    alerts = []\n\n    for component in components:\n        # Check component health\n        if not component[\"IsHealthy\"]:\n            alerts.append({\n                \"component\": component[\"Name\"],\n                \"status\": \"Unhealthy\",\n                \"message\": component.get(\"Message\", \"No details available\")\n            })\n\n        # Check last heartbeat\n        last_heartbeat = datetime.fromisoformat(component[\"LastHeartbeat\"])\n        if (datetime.now() - last_heartbeat).total_seconds() &gt; threshold_minutes * 60:\n            alerts.append({\n                \"component\": component[\"Name\"],\n                \"status\": \"Delayed Heartbeat\",\n                \"last_seen\": last_heartbeat.isoformat()\n            })\n\n    return alerts\n\n# Monitor components\nalerts = monitor_components(threshold_minutes=5)\n</code></pre>"},{"location":"resources/status/#license-monitoring","title":"License Monitoring","text":"<pre><code>def monitor_license_status(warning_days: int = 30):\n    \"\"\"Monitor license status with warnings\"\"\"\n    license_status = client.status.get_license_status()\n    warnings = []\n\n    # Check expiration\n    if license_status[\"ExpirationDate\"]:\n        expiration = datetime.fromisoformat(license_status[\"ExpirationDate\"])\n        days_remaining = (expiration - datetime.now()).days\n\n        if days_remaining &lt;= warning_days:\n            warnings.append({\n                \"type\": \"License Expiration\",\n                \"message\": f\"License expires in {days_remaining} days\",\n                \"expiration\": expiration.isoformat()\n            })\n\n    # Check usage\n    if license_status[\"UsedLicenses\"] &gt; license_status[\"AllowedLicenses\"] * 0.9:\n        warnings.append({\n            \"type\": \"License Usage\",\n            \"message\": \"License usage above 90%\",\n            \"used\": license_status[\"UsedLicenses\"],\n            \"total\": license_status[\"AllowedLicenses\"]\n        })\n\n    return warnings\n\n# Monitor license status\nlicense_warnings = monitor_license_status()\n</code></pre>"},{"location":"resources/status/#version-management","title":"Version Management","text":"<pre><code>def check_version_compatibility():\n    \"\"\"Check version compatibility across components\"\"\"\n    version_info = client.status.get_version()\n\n    compatibility = {\n        \"orchestrator\": version_info[\"Version\"],\n        \"api\": version_info[\"ApiVersion\"],\n        \"database\": version_info[\"DatabaseVersion\"],\n        \"is_compatible\": all([\n            version_info[\"IsApiVersionCompatible\"],\n            version_info[\"IsDatabaseVersionCompatible\"]\n        ]),\n        \"warnings\": []\n    }\n\n    if not version_info[\"IsApiVersionCompatible\"]:\n        compatibility[\"warnings\"].append(\"API version mismatch\")\n    if not version_info[\"IsDatabaseVersionCompatible\"]:\n        compatibility[\"warnings\"].append(\"Database version mismatch\")\n\n    return compatibility\n\n# Check version compatibility\nversion_status = check_version_compatibility()\n</code></pre>"},{"location":"resources/status/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError, RequestException\n\ndef safe_status_check():\n    try:\n        status = client.status.get_status()\n        return {\n            \"success\": True,\n            \"status\": status\n        }\n    except HTTPError as e:\n        return {\n            \"success\": False,\n            \"error\": f\"HTTP Error: {e.response.status_code}\",\n            \"message\": str(e)\n        }\n    except RequestException as e:\n        return {\n            \"success\": False,\n            \"error\": \"Connection Error\",\n            \"message\": str(e)\n        }\n\n# Safe status check\nresult = safe_status_check()\n</code></pre>"},{"location":"resources/status/#best-practices","title":"Best Practices","text":"<ol> <li>Regular health checks</li> <li>Monitor component heartbeats</li> <li>Track license usage trends</li> <li>Set up alerts for issues</li> <li>Document version requirements</li> <li>Regular compatibility checks</li> <li>Monitor system performance</li> <li>Keep status logs</li> <li>Plan for maintenance windows</li> </ol>"},{"location":"resources/status/#security-considerations","title":"Security Considerations","text":"<ol> <li>Secure status endpoints</li> <li>Monitor access attempts</li> <li>Validate component authenticity</li> <li>Protect status information</li> <li>Audit system changes</li> <li>Monitor security components</li> <li>Track authorization status</li> </ol>"},{"location":"resources/status/#see-also","title":"See Also","text":"<ul> <li>UiPath Status Documentation</li> <li>System Monitoring</li> <li>License Management</li> <li>Maintenance for system maintenance</li> <li>Stats for detailed metrics </li> </ul>"},{"location":"resources/task_forms/","title":"Task Forms","text":"<p>The Task Forms resource allows you to manage UiPath Task Forms, which enable human interaction within automation processes. Task Forms can collect user input, display information, and facilitate decision-making.</p>"},{"location":"resources/task_forms/#related-resources","title":"Related Resources","text":"<ul> <li>Jobs - Jobs that use task forms</li> <li>Processes - Processes that include forms</li> <li>Robots - Robots that interact with forms</li> </ul>"},{"location":"resources/task_forms/#methods","title":"Methods","text":""},{"location":"resources/task_forms/#get","title":"get()","text":"<p>Get a list of task forms with optional filters.</p> <pre><code>forms = client.task_forms.get(\n    process_name=\"InvoiceProcess\",    # Filter by process\n    status=\"Pending\"                  # Filter by status\n)\n</code></pre>"},{"location":"resources/task_forms/#parameters","title":"Parameters","text":"<ul> <li><code>process_name</code> (str, optional): Filter by process name</li> <li><code>status</code> (str, optional): Filter by form status (Pending, Completed, Canceled)</li> </ul>"},{"location":"resources/task_forms/#returns","title":"Returns","text":"<p>List[Dict]: List of task form objects matching the filters</p>"},{"location":"resources/task_forms/#get_by_id","title":"get_by_id()","text":"<p>Get a specific task form by ID.</p> <pre><code>form = client.task_forms.get_by_id(123)\n</code></pre>"},{"location":"resources/task_forms/#parameters_1","title":"Parameters","text":"<ul> <li><code>form_id</code> (int): ID of the form to retrieve</li> </ul>"},{"location":"resources/task_forms/#returns_1","title":"Returns","text":"<p>Dict: Task form details</p>"},{"location":"resources/task_forms/#submit","title":"submit()","text":"<p>Submit a response to a task form.</p> <pre><code>client.task_forms.submit(\n    form_id=123,\n    data={\n        \"approved\": True,\n        \"comments\": \"Invoice approved for payment\"\n    }\n)\n</code></pre>"},{"location":"resources/task_forms/#parameters_2","title":"Parameters","text":"<ul> <li><code>form_id</code> (int): ID of the form to submit</li> <li><code>data</code> (Dict): Form response data</li> </ul>"},{"location":"resources/task_forms/#assign","title":"assign()","text":"<p>Assign a task form to a user.</p> <pre><code>client.task_forms.assign(\n    form_id=123,\n    user_id=456\n)\n</code></pre>"},{"location":"resources/task_forms/#parameters_3","title":"Parameters","text":"<ul> <li><code>form_id</code> (int): ID of the form</li> <li><code>user_id</code> (int): ID of the user to assign</li> </ul>"},{"location":"resources/task_forms/#examples","title":"Examples","text":""},{"location":"resources/task_forms/#form-processing","title":"Form Processing","text":"<pre><code>def process_approval_forms(process_name: str):\n    \"\"\"Process pending approval forms\"\"\"\n    # Get pending forms\n    forms = client.task_forms.get(\n        process_name=process_name,\n        status=\"Pending\"\n    )\n\n    results = []\n    for form in forms:\n        try:\n            # Process form based on type\n            if form[\"FormType\"] == \"ApprovalForm\":\n                # Get form data\n                data = form[\"Data\"]\n\n                # Make approval decision\n                approved = data[\"Amount\"] &lt;= 1000\n\n                # Submit response\n                client.task_forms.submit(\n                    form_id=form[\"Id\"],\n                    data={\n                        \"approved\": approved,\n                        \"comments\": \"Auto-processed based on amount\",\n                        \"processedAt\": datetime.now().isoformat()\n                    }\n                )\n\n                results.append({\n                    \"form_id\": form[\"Id\"],\n                    \"status\": \"processed\",\n                    \"approved\": approved\n                })\n\n        except Exception as e:\n            results.append({\n                \"form_id\": form[\"Id\"],\n                \"status\": \"error\",\n                \"error\": str(e)\n            })\n\n    return results\n\n# Process approval forms\nresults = process_approval_forms(\"InvoiceApproval\")\n</code></pre>"},{"location":"resources/task_forms/#form-assignment","title":"Form Assignment","text":"<pre><code>def assign_forms_to_team(team_forms: List[Dict]):\n    \"\"\"Assign forms to team members\"\"\"\n    for assignment in team_forms:\n        try:\n            client.task_forms.assign(\n                form_id=assignment[\"form_id\"],\n                user_id=assignment[\"user_id\"]\n            )\n\n            # Add assignment metadata\n            client.task_forms.update(\n                form_id=assignment[\"form_id\"],\n                metadata={\n                    \"assigned_by\": \"auto_assignment\",\n                    \"assigned_at\": datetime.now().isoformat(),\n                    \"priority\": assignment.get(\"priority\", \"normal\")\n                }\n            )\n\n        except Exception as e:\n            print(f\"Error assigning form {assignment['form_id']}: {e}\")\n\n# Assign forms\nassignments = [\n    {\"form_id\": 123, \"user_id\": 456, \"priority\": \"high\"},\n    {\"form_id\": 124, \"user_id\": 457, \"priority\": \"normal\"}\n]\nassign_forms_to_team(assignments)\n</code></pre>"},{"location":"resources/task_forms/#form-monitoring","title":"Form Monitoring","text":"<pre><code>def monitor_form_sla(sla_minutes: int = 60):\n    \"\"\"Monitor forms for SLA compliance\"\"\"\n    forms = client.task_forms.get(status=\"Pending\")\n\n    violations = []\n    for form in forms:\n        created_time = datetime.fromisoformat(form[\"CreatedTime\"])\n        elapsed_minutes = (datetime.now() - created_time).total_seconds() / 60\n\n        if elapsed_minutes &gt; sla_minutes:\n            violations.append({\n                \"form_id\": form[\"Id\"],\n                \"process\": form[\"ProcessName\"],\n                \"elapsed_minutes\": elapsed_minutes,\n                \"assigned_to\": form.get(\"AssignedTo\")\n            })\n\n    return violations\n\n# Check SLA violations\nviolations = monitor_form_sla(sla_minutes=30)\n</code></pre>"},{"location":"resources/task_forms/#bulk-form-operations","title":"Bulk Form Operations","text":"<pre><code>def bulk_form_operations(operation: str, form_ids: List[int], **kwargs):\n    \"\"\"Perform bulk operations on forms\"\"\"\n    results = []\n\n    for form_id in form_ids:\n        try:\n            if operation == \"cancel\":\n                client.task_forms.cancel(\n                    form_id=form_id,\n                    reason=kwargs.get(\"reason\", \"Bulk cancellation\")\n                )\n            elif operation == \"reassign\":\n                client.task_forms.assign(\n                    form_id=form_id,\n                    user_id=kwargs[\"user_id\"]\n                )\n            elif operation == \"update_priority\":\n                client.task_forms.update(\n                    form_id=form_id,\n                    metadata={\"priority\": kwargs[\"priority\"]}\n                )\n\n            results.append({\n                \"form_id\": form_id,\n                \"status\": \"success\",\n                \"operation\": operation\n            })\n\n        except Exception as e:\n            results.append({\n                \"form_id\": form_id,\n                \"status\": \"error\",\n                \"operation\": operation,\n                \"error\": str(e)\n            })\n\n    return results\n\n# Perform bulk operations\nform_ids = [123, 124, 125]\nresults = bulk_form_operations(\"reassign\", form_ids, user_id=789)\n</code></pre>"},{"location":"resources/task_forms/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to submit to completed form\n    client.task_forms.submit(\n        form_id=123,\n        data={\"approved\": True}\n    )\nexcept HTTPError as e:\n    if e.response.status_code == 400:\n        print(\"Form already completed or invalid\")\n    elif e.response.status_code == 404:\n        print(\"Form not found\")\n    else:\n        print(f\"Error submitting form: {e}\")\n</code></pre>"},{"location":"resources/task_forms/#best-practices","title":"Best Practices","text":"<ol> <li>Set appropriate form timeouts</li> <li>Implement form validation</li> <li>Monitor form completion times</li> <li>Document form requirements</li> <li>Regular SLA monitoring</li> <li>Clear error messages</li> <li>Audit form submissions</li> <li>Backup form data</li> <li>Test form workflows</li> </ol>"},{"location":"resources/task_forms/#security-considerations","title":"Security Considerations","text":"<ol> <li>Validate form inputs</li> <li>Control form access</li> <li>Audit form changes</li> <li>Secure sensitive data</li> <li>Monitor form usage</li> <li>Implement timeouts</li> <li>Version control forms</li> </ol>"},{"location":"resources/task_forms/#see-also","title":"See Also","text":"<ul> <li>UiPath Forms Documentation</li> <li>Form Design Guide</li> <li>Form Security</li> <li>Jobs for process execution</li> <li>Processes for workflow management </li> </ul>"},{"location":"resources/webhooks/","title":"Webhooks","text":"<p>The Webhooks resource allows you to configure and manage webhook integrations in UiPath Orchestrator. Webhooks enable real-time notifications about events to external systems.</p>"},{"location":"resources/webhooks/#related-resources","title":"Related Resources","text":"<ul> <li>Jobs - Job events that trigger webhooks</li> <li>Robots - Robot events that trigger webhooks</li> <li>Queues - Queue events that trigger webhooks</li> </ul>"},{"location":"resources/webhooks/#methods","title":"Methods","text":""},{"location":"resources/webhooks/#get","title":"get()","text":"<p>Get a list of webhook subscriptions.</p> <pre><code>webhooks = client.webhooks.get(\n    enabled=True,           # Filter by enabled status\n    event_type=\"Job.Completed\"  # Filter by event type\n)\n</code></pre>"},{"location":"resources/webhooks/#parameters","title":"Parameters","text":"<ul> <li><code>enabled</code> (bool, optional): Filter by enabled status</li> <li><code>event_type</code> (str, optional): Filter by event type</li> </ul>"},{"location":"resources/webhooks/#returns","title":"Returns","text":"<p>List[Dict]: List of webhook subscriptions</p>"},{"location":"resources/webhooks/#get_by_id","title":"get_by_id()","text":"<p>Get a specific webhook subscription by ID.</p> <pre><code>webhook = client.webhooks.get_by_id(123)\n</code></pre>"},{"location":"resources/webhooks/#parameters_1","title":"Parameters","text":"<ul> <li><code>webhook_id</code> (int): ID of the webhook to retrieve</li> </ul>"},{"location":"resources/webhooks/#returns_1","title":"Returns","text":"<p>Dict: Webhook subscription details</p>"},{"location":"resources/webhooks/#create","title":"create()","text":"<p>Create a new webhook subscription.</p> <pre><code>webhook = client.webhooks.create({\n    \"Name\": \"JobNotifier\",\n    \"Url\": \"https://my-service.com/webhook\",\n    \"Enabled\": True,\n    \"SubscribeToAllEvents\": False,\n    \"AllowInsecureSsl\": False,\n    \"Secret\": \"my-signing-secret\",  # Optional\n    \"Events\": [\n        \"Job.Completed\",\n        \"Job.Faulted\"\n    ]\n})\n</code></pre>"},{"location":"resources/webhooks/#parameters_2","title":"Parameters","text":"<ul> <li><code>webhook_data</code> (Dict): Webhook configuration including:</li> <li><code>Name</code> (str, required): Webhook name</li> <li><code>Url</code> (str, required): Webhook endpoint URL</li> <li><code>Enabled</code> (bool, required): Whether webhook is enabled</li> <li><code>Events</code> (List[str], optional): Event types to subscribe to</li> <li><code>Secret</code> (str, optional): Signing secret for payload verification</li> <li><code>AllowInsecureSsl</code> (bool, optional): Allow insecure SSL connections</li> </ul>"},{"location":"resources/webhooks/#returns_2","title":"Returns","text":"<p>Dict: Created webhook details</p>"},{"location":"resources/webhooks/#update","title":"update()","text":"<p>Update an existing webhook subscription.</p> <pre><code>client.webhooks.update(123, {\n    \"Enabled\": False,\n    \"Events\": [\"Job.Completed\"]\n})\n</code></pre>"},{"location":"resources/webhooks/#parameters_3","title":"Parameters","text":"<ul> <li><code>webhook_id</code> (int): ID of webhook to update</li> <li><code>webhook_data</code> (Dict): Updated webhook data</li> </ul>"},{"location":"resources/webhooks/#delete","title":"delete()","text":"<p>Delete a webhook subscription.</p> <pre><code>client.webhooks.delete(123)\n</code></pre>"},{"location":"resources/webhooks/#parameters_4","title":"Parameters","text":"<ul> <li><code>webhook_id</code> (int): ID of webhook to delete</li> </ul>"},{"location":"resources/webhooks/#test","title":"test()","text":"<p>Test a webhook subscription.</p> <pre><code>result = client.webhooks.test(123)\n</code></pre>"},{"location":"resources/webhooks/#parameters_5","title":"Parameters","text":"<ul> <li><code>webhook_id</code> (int): ID of webhook to test</li> </ul>"},{"location":"resources/webhooks/#returns_3","title":"Returns","text":"<p>Dict: Test result details</p>"},{"location":"resources/webhooks/#examples","title":"Examples","text":""},{"location":"resources/webhooks/#webhook-management","title":"Webhook Management","text":"<pre><code>def setup_job_monitoring_webhook(url: str, secret: str):\n    \"\"\"Setup webhook for job monitoring\"\"\"\n    webhook = client.webhooks.create({\n        \"Name\": \"JobMonitor\",\n        \"Url\": url,\n        \"Enabled\": True,\n        \"Secret\": secret,\n        \"Events\": [\n            \"Job.Created\",\n            \"Job.Started\",\n            \"Job.Completed\",\n            \"Job.Faulted\",\n            \"Job.Stopped\"\n        ],\n        \"Headers\": {\n            \"X-Source\": \"UiPath\",\n            \"Content-Type\": \"application/json\"\n        }\n    })\n\n    # Test the webhook\n    test_result = client.webhooks.test(webhook[\"Id\"])\n\n    return {\n        \"webhook\": webhook,\n        \"test_result\": test_result\n    }\n\n# Setup job monitoring\nresult = setup_job_monitoring_webhook(\n    url=\"https://monitor.company.com/webhook\",\n    secret=\"secure-secret-key\"\n)\n</code></pre>"},{"location":"resources/webhooks/#event-management","title":"Event Management","text":"<pre><code>def manage_webhook_events(webhook_id: int, events: Dict[str, bool]):\n    \"\"\"Enable or disable specific webhook events\"\"\"\n    # Get current webhook config\n    webhook = client.webhooks.get_by_id(webhook_id)\n\n    # Update events\n    current_events = set(webhook[\"Events\"])\n\n    for event, enabled in events.items():\n        if enabled and event not in current_events:\n            current_events.add(event)\n        elif not enabled and event in current_events:\n            current_events.remove(event)\n\n    # Update webhook\n    updated = client.webhooks.update(webhook_id, {\n        \"Events\": list(current_events)\n    })\n\n    return updated\n\n# Manage events\nevents = {\n    \"Job.Created\": True,\n    \"Job.Faulted\": True,\n    \"Job.Completed\": False\n}\nupdated_webhook = manage_webhook_events(123, events)\n</code></pre>"},{"location":"resources/webhooks/#webhook-verification","title":"Webhook Verification","text":"<pre><code>def verify_webhook_payload(payload: bytes, signature: str, secret: str) -&gt; bool:\n    \"\"\"Verify webhook payload signature\"\"\"\n    import hmac\n    import hashlib\n\n    # Create HMAC SHA256 hash\n    expected = hmac.new(\n        secret.encode(),\n        payload,\n        hashlib.sha256\n    ).hexdigest()\n\n    # Compare signatures\n    return hmac.compare_digest(signature, expected)\n\n# Usage in Flask app\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route('/webhook', methods=['POST'])\ndef handle_webhook():\n    signature = request.headers.get('X-UiPath-Signature')\n\n    if verify_webhook_payload(\n        request.get_data(),\n        signature,\n        \"webhook-secret\"\n    ):\n        # Process verified webhook\n        return {\"status\": \"success\"}, 200\n    else:\n        return {\"status\": \"invalid signature\"}, 401\n</code></pre>"},{"location":"resources/webhooks/#error-handling","title":"Error Handling","text":"<pre><code>from requests.exceptions import HTTPError\n\ntry:\n    # Try to create webhook with invalid URL\n    client.webhooks.create({\n        \"Name\": \"InvalidWebhook\",\n        \"Url\": \"invalid-url\",\n        \"Enabled\": True\n    })\nexcept HTTPError as e:\n    if e.response.status_code == 400:\n        print(\"Invalid webhook configuration\")\n    elif e.response.status_code == 409:\n        print(\"Webhook name already exists\")\n    else:\n        print(f\"Error creating webhook: {e}\")\n</code></pre>"},{"location":"resources/webhooks/#best-practices","title":"Best Practices","text":"<ol> <li>Use HTTPS endpoints</li> <li>Implement payload verification</li> <li>Handle retries gracefully</li> <li>Monitor webhook health</li> <li>Use descriptive names</li> <li>Subscribe to relevant events</li> <li>Implement proper error handling</li> <li>Regular testing</li> <li>Document webhook integrations</li> </ol>"},{"location":"resources/webhooks/#security-considerations","title":"Security Considerations","text":"<ol> <li>Use HTTPS endpoints only</li> <li>Implement signature verification</li> <li>Protect webhook secrets</li> <li>Monitor failed deliveries</li> <li>Validate payload data</li> <li>Control webhook access</li> <li>Regular security review</li> </ol>"},{"location":"resources/webhooks/#see-also","title":"See Also","text":"<ul> <li>UiPath Webhooks Documentation</li> <li>Webhook Security</li> <li>Event Types</li> <li>Jobs for job events</li> <li>Robots for robot events </li> </ul>"},{"location":"resources/queues/test_data_queue/","title":"Test Data Queue","text":"<p>This documentation describes how to work with test data queues in the UiPath Orchestrator.</p> <p>[Content to be added] </p>"},{"location":"resources/settings/maintenance/","title":"Maintenance Settings","text":"<p>This documentation describes the maintenance settings and operations in UiPath Orchestrator.</p> <p>[Content to be added] </p>"}]}